\import Algebra.Monoid

\class Group \extends Monoid {
  | inverse : El -> El
  | inverse-left (a : El) : inverse a * a = ident
  | inverse-right (a : El) : a * inverse a = ident
}

\func / {G : Group} (x y : G) => x * inverse y

\class AddGroup \extends AddMonoid => Group

\func - {A : AddGroup} (x y : A) => x + inverse y

\class CGroup \extends Group, CMonoid

\class AbGroup \extends AbMonoid => CGroup