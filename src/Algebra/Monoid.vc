\import Paths(*>)
\import Relation.PartialOrder

\class Monoid (El : \Set) {
  | ident : El
  | \infixl 7
    * : El -> El -> El
  | *-assoc (x y z : El) : (x * y) * z = x * (y * z)
  | ident-left (x : El) : ident * x = x
  | ident-right (x : El) : x * ident = x
}

\class AddMonoid => Monoid {
  | * => \infixl 6 +
  | ident => zero
  | *-assoc => +-assoc
  | ident-left => zero-left
  | ident-right => zero-right
}

\class CMonoid \extends Monoid {
  | *-comm (x y : El) : x * y = y * x
  | ident-right x => *-comm x ident *> ident-left x
}

\class AbMonoid \extends AddMonoid => CMonoid {
  | *-comm => +-comm
}
