\import Data.DyRat
\import Relation.PartialOrder

\data DyReal : \Set
  | rat DyRat
  | lim (x : Positive {DyRat} -> DyReal) (\Pi (d e : Positive {DyRat}) -> x d ~_{d + e} x e)
  | eq (x y : DyReal) (\Pi (e : Positive {DyRat}) -> x ~_{e} y) : x = y
  \where
    \instance DyReal-isSet : Set DyReal | proof => {?}

\truncated \data \infix 4 ~_{e : Positive {DyRat}} (x y : DyReal) : \Prop \elim x, y
  | rat q, rat r => rat-rat (- e < q - r) (q - r < e)
  | rat q, lim y => rat-lim (d : Positive {DyRat}) (p : Positive (e - d)) (rat q ~_{p} y d)
  | lim x, rat r => lim-rat (d : Positive {DyRat}) (p : Positive (e - d)) (x d ~_{p} rat q)
  | lim x, lim y => lim-lim (d f : Positive {DyRat}) (p : Positive (e - d - f)) (x d ~_{p} y f)
