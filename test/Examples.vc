\import Paths
\import Logic

\import Data.Unit
\import Data.Bool
\import Data.Empty
\import Data.Maybe
\import Data.Either
\import Combinators
\import Data.List.Properties
\import Hlevel
\import PropLogic


\func brace_free {A B C : \Type} (f : A -> B) (g : B -> C) (x : A) => g $ f x

\func point_free {A B C : \Type} (f : A -> B) (g : B -> C) => g o f

-- Interval, Sigma, Pi

\func bool_to_I (b : Bool) : I
    | false => left
    | true  => right

\func trivial_sigma : \Sigma Unit Unit => (unit, unit)

\func trivial_pi_id : \Pi Unit -> Unit => \lam x => x

\func trivial_pi_const : \Pi Unit -> Unit => \lam _ => unit

-- Equality

\func true_and_false : and true false = false => idp

\func true_and_false' (e : Empty) : and true false != true =>
  \lam p => transport (True o not) p unit

-- Finite sets

\import Data.Fin
\import Data.Fin.Properties

\func fin11 : Fin 1 => fzero

\func fin21 : Fin 2 => fzero

\func fin22 : Fin 2 => fsuc fzero

\func fin31 : Fin 3 => fzero

\func fin32 : Fin 3 => fsuc fzero

\func fin33 : Fin 3 => fsuc (fsuc fzero)

\func fin99 : Fin 9 => from-nat 8

\func from-nat-ok : from-nat 1 = fsuc fzero => idp

\func to-nat-ok : to-nat {2} (fsuc fzero) = 1 => idp

-- Arithmetic

\import Data.Nat.Compare

\func two_isnt_three : is-left (2 =? 3) => unit

\func two_le_three : is-right (2 =<? 3) => unit

-- Logic

\func unit_and_unit : Unit && Unit => (unit, unit)

-- \func -- g {A : \Type} {x y : A} (p : TrP (x = y)) : (x = y) \elim p
--  | inP q => q
--  | truncP q q' i => g q

\func tr_to_I {A : \Type} (x : TrP A) : I \elim x
    | inP a => left
-- \lam _ => left

\func -- trunc_test (A : \Type) (a a' : (#)A) : ((#)A) => a 
prop_trunc_test (A : \Type) (a a' : TrP A) : a = a' => path (truncP a a')

-- \data
-- Foo | foo (x y : Foo) (Path (\lam _ => Foo) x y)

{-
 \data TrS (A : \Type) 
      | inS A 
      | truncS (a a' : TrS A) (p q : Path (\lam _ => TrS A) a a') I I 
  \with 
      | truncS a _ _ _ left _ => a | truncS _ a' _ _ right _ => a' | truncS _ _ p _ i left => (p @ i) | truncS _ _ _ q i right => (q @ i)
-}

{-
\func equality-on-set {A : \Set} (a a' : A) : (isProp (a = a')) => prop-isProp (Path (\lam _ => A) a a')

\func set_trunc_test (A : \Type) (a a' : TrS A) (p q : Path (\lam _ => TrS A) a a') : (TrS A) => truncS a a' p q left left

 \func set_trunc_test' (A : \Type) (a a' : TrS A) (p q : Path (\lam _ => TrS A) a a') : (p = q) => path (\lam i => path (\lam j => truncS a a' p q j i))
-}

 \data TrS' (A : \Type) 
      | inS' A 
      | truncS' (a a' : TrS' A) (p q : a = a') (i j : I) \elim i, j {
        | left,  _ => a
        | right, _ => a'
        | i, left  => p @ i
        | i, right => q @ i
      }

\func set_trunc_test (A : \Type) (a a' : TrS' A) (p q : a = a') : TrS' A => truncS' a a' p q left left


\func set_trunc_test' (A : \Type) (a a' : TrS' A) (p q : a = a') : p = q => path (\lam i => path (\lam j => truncS' a a' p q j i))
