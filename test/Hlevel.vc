\import Paths
\import Combinators
\import Equiv
\import Data.Nat.Base

\func isContr (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func I-isContr : isContr I => (left, \lam i => path (\lam j => squeeze i j))

\func isProp (A : \Type) => \Pi (a a' : A) -> a = a'

\func isSet (A : \Type) => \Pi (a a' : A) -> isProp (a = a')

\func ofHlevel (n : Nat) (A : \Type) : \Type \elim n
    | zero => isContr A
    | suc n => \Pi (a a' : A) -> ofHlevel n (a = a')

\func prop-eq {A B : \Type} (pa : isProp A) (pb : isProp B) (f : A -> B) (g : B -> A) : A = B 
    => equiv-to-path (f, ((g, \lam _ => pa _ _), (g, \lam _ => pb _ _)))

\func ofHlevel1-isProp (A : \Type) (f : ofHlevel (suc zero) A) : isProp A => \lam a a' => (f a a').1

\func ofHlevel2-isSet (A : \Type) (f : ofHlevel 2 A) : isSet A => \lam a a' => ofHlevel1-isProp (a = a') (f a a')

\func ofHlevel1-eq-isProp (A : \Type) : ofHlevel 1 A = isProp A 
    => prop-eq (ofHlevel-isProp 1 A) (isProp-isProp A) (ofHlevel1-isProp A) (isProp-ofHlevel1 A)

\func ofHlevel2-eq-isSet (A : \Type) : ofHlevel 2 A = isSet A 
    => prop-eq (ofHlevel-isProp 2 A) (isSet-isProp A) (ofHlevel2-isSet A) (isSet-ofHlevel2 A)

\func contr-codom {A : \Type} (B : A -> \Type) (nT : \Pi (a : A) -> isContr (B a)) : isContr (\Pi (a : A) -> B a) => 
    \let f0 : \Pi (a : A) -> B a => \lam a => (nT a).1
    \in (f0, \lam f1 => funExt B f0 f1 (\lam a => inv ((nT a).2 (f0 a)) *> (nT a).2 (f1 a)))

\func ofHlevel-codom (A : \Type) (B : A -> \Type) (n : Nat) (nT : \Pi (a : A) -> ofHlevel n (B a)) : ofHlevel n (\Pi (a : A) -> B a) \elim n
    | zero => contr-codom B nT
    | suc n' => \lam f0 f1 => (
        \let | IH => ofHlevel-codom A (\lam a => f0 a = f1 a) n' (\lam a => nT a (f0 a) (f1 a))
             | A0 : ofHlevel n' (\Pi (a : A) -> f0 a = f1 a) => IH
        \in transport (\lam eq => ofHlevel n' eq) (inv (equiv-to-path (funExt-eq B f0 f1))) A0)

\func isContr-isProp (A : \Type) (c : isContr A) : isProp A => \lam a a' => inv (c.2 a) *> c.2 a'

\func isProp-fun-isContr (A : \Type) : (A -> isContr A) = isProp A => 
    \let A1 : isProp (A -> isContr A) => \lam y y' => funExt (\lam x0 => isContr A) y y' (\lam z => ofHlevel-isProp 0 A (y z) (y' z))
    \in prop-eq A1 (isProp-isProp A) (isProp-isContr A) (\lam f a => (a, f a))

\func ofHlevel-suc {E : \Type} {n : Nat} (nT : ofHlevel n E) : ofHlevel (suc n) E \elim n
    | zero => transport id (inv (ofHlevel1-eq-isProp E)) (isContr-isProp E nT)
    | suc n' => \lam a a' => ofHlevel-suc {a = a'} {n'} (nT a a')

\func ofHlevel-plus {E : \Type} {n : Nat} (k : Nat) (nT : ofHlevel n E) : ofHlevel (k + n) E \elim k
    | zero => nT
    | suc k' => ofHlevel-suc (ofHlevel-plus k' nT)

\func isProp-ofHlevel1 (A : \Type) (f : isProp A) : ofHlevel (suc zero) A => \lam a a' => (inv (f a a) *> f a a', Jl (\lam x q => inv (f a a) *> f a x = q) (inv-concat (f a a)))

\func isSet-ofHlevel2 (A : \Type) (f : isSet A) : ofHlevel 2 A => \lam a a' => isProp-ofHlevel1 (a = a') (f a a')

\func isProp-isSet (A : \Type) (p : isProp A) : isSet A => \lam a a' => isContr-isProp (a = a') (isProp-ofHlevel1 A p a a')

\func SigmaExt {A : \Type} (B : A -> \Type) (x y : \Sigma (a : A) (B a)) (p : x.1 = y.1) (q : transport B p x.2 = y.2) : x = y
    => path (\lam i => (p @ i, pathOver q @ i))

\func isContrFun-isProp (A : \Type) : isProp (isContr A) =>
    \lam c1 c2 => SigmaExt (\lam a => \Pi (a' : A) -> a = a') c1 c2 (c1.2 (c2.1))
    (path (\lam i a' => isProp-isSet A (isContr-isProp A c1) (c2.1) a'
        (transport (\lam a => \Pi (a' : A) -> a = a') (c1.2 (c2.1)) (c1.2) a') (c2.2 a') @ i))

\func isProp-isProp (A : \Type) : isProp (isProp A) => \lam f g => path (\lam i a a' => isProp-isSet A f a a' (f a a') (g a a') @ i)

\func isSet-isProp (A : \Type) : isProp (isSet A) => \lam p1 p2 => funExt (\lam a => \Pi (a' : A) -> isProp (a = a')) p1 p2
    (\lam a => funExt (\lam a' => isProp (a = a')) (p1 a) (p2 a) (\lam a' => (
        \let A0 => isProp-isProp (a = a')
        \in A0 (p1 a a') (p2 a a'))))

\func ofHlevel-isProp (n : Nat) (A : \Type) : isProp (ofHlevel n A) \elim n
    | zero => isContrFun-isProp A
    | suc n => \lam f g => path (\lam i a a' => ofHlevel-isProp n (a = a') (f a a') (g a a') @ i)

\func depfun-preserve-prop {A : \Type} (B : A -> \Type) (c : \Pi (a : A) -> isProp (B a)) : isProp (\Pi (a : A) -> B a) 
    => \lam y y' => funExt (\lam a => B a) y y' (\lam a => c a (y a) (y' a))

\func ddfun-preserve-prop {A : \Type} (B : A -> A -> \Type) (c : \Pi (a a' : A) -> isProp (B a a')) : isProp (\Pi (a a' : A) -> B a a') 
    => depfun-preserve-prop (\lam a => \Pi (a' : A) -> B a a') (\lam a => depfun-preserve-prop (B a) (c a))

\func ofHlevel-map (X : \Type) (n : Nat) (f : X -> ofHlevel (suc n) X) : ofHlevel (suc n) X => \lam a a' => f a a a'

\func ofHlevel-sigma {A : \Type} (B : A -> \Type) {n : Nat} (nTA : ofHlevel n A) (nTB : \Pi (a : A) -> ofHlevel n (B a)) :
    ofHlevel n (\Sigma (a : A) (B a)) \elim n
    | zero => transport (\lam (T : \Type) => isContr T) (inv (equiv-to-path (sigma-contr-fibers B nTB))) nTA
    | suc n' => \lam a a' => transport (\lam T => ofHlevel n' T) (inv (equiv-to-path (sigma-equiv B a a')))
        (ofHlevel-sigma (\lam (p : a.1 = a'.1) => transport B p a.2 = a'.2) (nTA a.1 a'.1)
            (\lam p => nTB a'.1 (transport B p a.2) a'.2))

\func Types (n : Nat) => \Sigma (A : \Type) (ofHlevel n A)

\func eq-sigma-prop {A : \Type} (P : A -> \Type) (pr : \Pi (x : A) -> isProp (P x)) (u v : \Sigma (x : A) (P x)) (p : u.1 = v.1) : u = v 
    => sigma-ext-eq P {u} {v} (p, pr v.1 _ _)

\func eq-sigma-prop-eq {A : \Type} (P : A -> \Type) (pr : \Pi (x : A) -> isProp (P x)) (u v : \Sigma (a : A) (P a)) : (u = v) =~= (u.1 = v.1) => 
    \let | F : u = v -> u.1 = v.1 => pmap (\lam (z : \Sigma (a : A) (P a)) => z.1)
         | G : u.1 = v.1 -> u = v => eq-sigma-prop P pr u v
         | A0 => equiv-to-path (sigma-equiv P u v)
         | TI => transp-invpath-linv id A0
    \in (F, ((G,
            \lam z => inv (TI (G (F z))) *> inv (pmap (\lam w => transport id (inv A0) w) (eq-sigma-prop (\lam p => transport P p u.2 = v.2)
                (\lam (p : u.1 = v.1) => isProp-isSet (P v.1) (pr v.1) (transport P p u.2) v.2) (transport id A0 z)
                (transport id A0 (G (F z))) idp)) *> TI z), (G, \lam z => idp)))

\func Types-eq (n : Nat) (A B : n `Types) : (A = B) =~= (A.1 = B.1) 
    => eq-sigma-prop-eq (\lam (A : \Type) => ofHlevel n A) (ofHlevel-isProp n) A B

\func ofHlevel-embedding {A B : \Type} {n : Nat} (f : A -> B) (e : is_embedding f) (nT : ofHlevel (suc n) B) : ofHlevel (suc n) A 
    => \lam x y => transport (\lam z => ofHlevel n z) (inv (equiv-to-path (pmap f, e x y))) (nT (f x) (f y))

\func isContr-embedding {A B : \Type} (f : A -> B) (e : is_embedding f) (nT : isContr B) (a : A) : isContr A 
    => (a, \lam a' => (ofHlevel-embedding {_} {_} {zero} f e (isProp-ofHlevel1 B (isContr-isProp B nT)) a a').1)

\func proj-embedding (A B : \Type) : is_embedding (\lam (x : A =~= B) => x.1) 
    => \lam x y => (eq-sigma-prop-eq (\lam (f : A -> B) => isequiv f) (\lam f => isequiv-is-prop f) x y).2

\func ofHlevel-retracts (A B : \Type) (n : Nat) (r : is_retr A B) (nT : ofHlevel n B) : ofHlevel n A \elim n
    | zero => (r.2.1 nT.1, \lam a => pmap r.2.1 (nT.2 (r.1 a)) *> r.2.2 a)
    | suc n' => \lam a a' => (
        \let | F => pmap r.1
             | G => \lam (q : r.1 a = r.1 a') => inv (r.2.2 a) *> pmap r.2.1 q <* r.2.2 a'
             | A0 => Jl {A} {a} (\lam a' p => inv (r.2.2 a) *> pmap r.2.1 (pmap r.1 p) <* r.2.2 a' = p) (inv-concat (r.2.2 a)) {a'}
             | A1 => ofHlevel-retracts (a = a') (r.1 a = r.1 a') n' (F, (G, \lam (p : a = a') => A0 p))
        \in A1 (nT (r.1 a) (r.1 a')))

\func ofHlevel-Types1 (n : Nat) : ofHlevel (suc (suc n)) (suc n `Types) => \lam (X X' : suc n `Types) => (
    \let | A0 : ofHlevel (suc n) (X.1 -> X'.1) => ofHlevel-codom X.1 (const X'.1) (suc n) (const X'.2)
         | A1 : ofHlevel (suc n) (X.1 =~= X'.1) => ofHlevel-embedding (\lam (e : X.1 =~= X'.1) => e.1) (proj-embedding X.1 X'.1) A0
    \in transport (\lam T => ofHlevel (suc n) T)
            (equiv-to-path (univalence-axiom X.1 X'.1) *> inv (equiv-to-path (Types-eq (suc n) X X'))) A1)

\func contr-Types : ofHlevel (suc zero) (zero `Types) => \lam (X X' : zero `Types) => (
    \let | A1 => ofHlevel-Types1 zero (X.1, ofHlevel-suc {_} {zero} X.2) (X'.1, ofHlevel-suc {_} {zero} X'.2)
         | A0 : isProp (X.1 = X'.1) =>
             transport (\lam eq => isProp eq) (equiv-to-path (Types-eq (suc zero) _ _)) (ofHlevel1-isProp (_ = _) A1)
         | q : X.1 = X'.1 => equiv-to-path (equiv-contr X.2 X'.2)
    \in transport (\lam T => isContr T) (inv (equiv-to-path (Types-eq zero X X'))) (q, \lam p => A0 q p))

\func ofHlevel-Types (n : Nat) : ofHlevel (suc n) (n `Types)
    | zero => contr-Types
    | suc n' => ofHlevel-Types1 n'
