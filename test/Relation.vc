\import Logic
\import PropLogic

\function
Reflexive {X : \Type} (R : X -> X -> \Type) =>
  \Pi (x : X) -> R x x

\function
Symmetric {X : \Type} (R : X -> X -> \Type) =>
  \Pi (x y : X) -> R x y -> R y x

\function
Transitive {X : \Type} (R : X -> X -> \Type) =>
  \Pi (x y z : X) -> R x y -> R y z -> R x z

\import Data.Empty

\data
Di (A B : \Type)
  | diyes (a : A) (nb : Not B)
  | dino (na : Not A) (b : B)

\data
Tri (A B C : \Type)
  | tri_lt (a : A) (nb : Not B) (nc : Not C)
  | tri_eq (na : Not A) (b : B) (nc : Not C)
  | tri_gt (na : Not A) (nb : Not B) (c : C)

\function 
ReflexiveP {X : \Type} (R : X -> X -> \Prop) =>
   \Pi (x : X) -> R x x

\function
SymmetricP {X : \Type} (R : X -> X -> \Prop) =>
  \Pi (x y : X) -> R x y -> R y x

\function
TransitiveP {X : \Type} (R : X -> X -> \Prop) =>
  \Pi (x y z : X) -> R x y -> R y z -> R x z

\function
EquivalenceP {X : \Type} (R : X -> X -> \Prop) =>
  \Sigma (ReflexiveP R) (SymmetricP R) (TransitiveP R)

\function
EquivRelP (X : \Set) => 
  \Sigma (R : X -> X -> \Prop) (EquivalenceP R)
