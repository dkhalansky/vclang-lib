\open ::Data::Nat::Base
\open ::Prog::g_Bijection
\open ::Prog::e_Surj
\open ::Sets
\open ::PropLogic
\open ::Equiv
\open ::Combinators
\open ::Paths
\open ::Hlevel
\open ::Data::Fin
\open ::Data::Fin::Properties
\open ::Data::Either
\open ::Data::Nat::Compare
\open ::Data::Nat::Properties
\open ::Relation
\open ::Data::Empty
\open ::Data::Unit
\open ::Data::Bool
\open ::Logic

-- Permutation group

\function isPerm {A : \Set} (f : A -> A) : \Set => isBij f

\function permCompIsPerm {A : \Set} (f : A -> A) (g : A -> A) (fp : isPerm f) (gp : isPerm g) : isPerm (g `o f) => bijCompIsBij f g fp gp

\function permIdentity {A : \Set} : \Sigma (f : A -> A) (isBij f) => (id, (id, (idp, idp)))

\function permInverse {A : \Set} (f : A -> A) (fp : isPerm f) : \Sigma (g : A -> A) (isPerm g) => (fp.1, (f, (fp.2.2, fp.2.1)))

-- Finiteness

\function subsetIsFinite {A : \Set} (B : A -> \Prop) (n : Nat) : \Prop => exists (\lam (f : Fin n -> (\Sigma (a : A) (B a))) => isSurj f)

\function isPermSupport {A : \Set} (f : A -> A) (B : A -> \Prop) : \Prop => \Pi (a : A) -> B a ||| (f a = a)

-- Finite permutation group

\function finitePerm {A : \Set} (f : A -> A) : \Set => \Sigma (isPerm f) (\Sigma (n : Nat) (exists (\lam B => isPermSupport f B &&& subsetIsFinite B n)))

\function Le-is-addition (a b : Nat) (g : a `Le b) : \Sigma (c : Nat) (b = a + c) => \elim a, b, g
  | zero, b, _ => (b, idp)
  | suc a, suc b, le_ss p => \let res => Le-is-addition a b p \in (res.1, pmap suc res.2)

\function plus-minus-inv (a b : Nat) : b + a - b = a => \elim b
  | zero => idp
  | suc b' => pred-suc-minus (b' + a) b' *> plus-minus-inv a b'

\function pred-suc-inv (n : Nat) : pred (suc n) = n => \elim n
  | zero => idp
  | suc n' => idp

\function eq-unsuc {a b : Nat} (p : suc a = suc b) : a = b => inv (pred-suc-inv a) *> pmap pred p *> pred-suc-inv b

\function minus-remove-suc {n m : Nat} : (suc n - suc m = n - m) => pred-suc-minus n m

\function fin-bounded {n : Nat} (fn : Fin n) : to-nat fn `Lt n => \elim n, fn
  | suc n', fzero => le_ss le_z
  | suc n', fsuc fn' => le_ss (fin-bounded fn')

\function fin-minus-helper {n o : Nat} (p : (n + o) `Lt (n + 0)) : Empty => \elim n
  | zero => suc_nle_zero p
  | suc n => fin-minus-helper (Le_unsuc p)

\function fin-minus {n m o : Nat} {a : Fin (n + m)} (p : to-nat a = n + o) : \Sigma (c : Fin m) (to-nat c = o) => \elim n, m, a
  | zero,   suc m', fzero => (fzero {m'}, p)
  | suc n', zero,   fzero => absurd (zero-ne-suc p)
  | suc n', suc m', fzero => absurd (zero-ne-suc p)
  | zero,   suc m', fsuc a' => (fsuc {m'} a', p)
  | suc n', zero,   fsuc a' => absurd (fin-minus-helper (transport (\lam x => x `Le (n' + 0)) p (fin-bounded a')))
  | suc n', suc m', fsuc a' => fin-minus (eq-unsuc p)

\function fin-precise {n m : Nat} (p : n `Gt m) : \Sigma (c : Fin n) (m = to-nat c) => \elim n, m
  | zero, _ => absurd (suc_nle_zero p)
  | suc n, zero  => (fzero, idp)
  | suc n, suc m => \let z => fin-precise (Le_unsuc p)
                     \in (fsuc z.1, pmap suc z.2)

\function plus-comm1 (n m : Nat) : suc (n + m) = n + suc m =>
  pmap suc (plus-comm n m) *> plus-comm (suc m) n

\function lt-n-plus {n m : Nat} (p : n + m `Lt n) : Empty => \elim n, p
  | suc n, le_ss s => lt-n-plus s

\function nlt-ge {n m : Nat} (p : Not (n `Lt m)) : m `Le n => \elim n, m
  | zero, zero  => le_z
  | suc n, zero => le_z
  | zero, suc m => absurd (p (le_ss le_z))
  | suc n, suc m => le_ss (nlt-ge (\lam nltm => p (le_ss nltm)))

\function fin-partition-helper {n m : Nat} {a : Fin (n + m)} (d : Dec (to-nat a `Lt n)) : Either (Fin n) (Fin m) => \elim d
  | inl p => inr (fin-minus (Le-is-addition n (to-nat a) (nlt-ge p)).2).1
  | inr p => inl (fin-precise p).1

\function fin-partition {n m : Nat} (a : Fin (n + m)) : Either (Fin n) (Fin m) => fin-partition-helper (Lt-dec (to-nat a) n)

\function fin-departition {n m : Nat} (a : Either (Fin n) (Fin m)) : Fin (n + m) => \elim a
  | inl p => flift m p
  | inr p => fadd n p

\function either-helper {A B : \Type} (d : Either A B) : Either (\Sigma (a : A) (d = inl a)) (\Sigma (b : B) (d = inr b)) => \elim d
  | inl a => inl (a, idp)
  | inr a => inr (a, idp)

\function fin-ext {n : Nat} {a b : Fin n} (pf : to-nat a = to-nat b) : a = b => \elim n, a, b
  | suc n, fzero,  fzero  => idp
  | suc n, fsuc a, fsuc b => pmap fsuc (fin-ext {n} {a} {b} (eq-unsuc pf))
  | suc n, fzero,  fsuc b => absurd (zero-ne-suc pf)
  | suc n, fsuc a, fzero  => absurd (zero-ne-suc (inv pf))

\function unplus {n m o : Nat} (p : n + m = n + o) : m = o => \elim n
  | zero => p
  | suc n => unplus (eq-unsuc p)

\function fin-partition-isSurj {n m : Nat} : isSurj (fin-partition {n} {m}) =>
  \lam b => inP (fin-departition b, inP (
    \case either-helper b \with {
      | inl p => transport (\lam c => (fin-partition (fin-departition c)) = c) (inv p.2) (
          \case either-helper (Lt-dec (to-nat (flift m p.1)) n) \with {
            | inl ct => absurd (ct.1 (transport (\lam tnt => tnt `Lt n) (flift-id m p.1) (fin-bounded p.1)))
            | inr pf => pmap fin-partition-helper pf.2 *> pmap inl (fin-ext (inv (flift-id m p.1 *> (fin-precise pf.1).2)))
          })
      | inr p => transport (\lam c => (fin-partition (fin-departition c)) = c) (inv p.2) (
          \case either-helper (Lt-dec (to-nat (fadd n p.1)) n) \with {
            | inl pf => pmap fin-partition-helper pf.2 *> pmap inr (fin-ext ((fin-minus (Le-is-addition n (to-nat (fadd n p.1)) (nlt-ge pf.1)).2).2 *>
                inv (unplus (fadd-adds n p.1 *> (Le-is-addition n (to-nat (fadd n p.1)) (nlt-ge pf.1)).2)) ))
            | inr ct => absurd (lt-n-plus (transport (\lam tnt => tnt `Lt n) (inv (fadd-adds n p.1)) ct.1))
          })
    }
  ))

\function inP-helper {A : \Type} (p : TrP A) : TrP (\Sigma (a : A) (p = inP a)) => \elim p
  | inP a => inP (a, idp)

\function finiteCompIsFinite {A : \Set} (f : A -> A) (g : A -> A) (ff : finitePerm f) (gf : finitePerm g) : finitePerm (g `o f) =>
  (permCompIsPerm f g ff.1 gf.1, (ff.2.1 + gf.2.1, \case ff.2.2 \with { inP Bf => \case gf.2.2 \with { inP Bg =>
    inP (\lam a => Bf.1 a ||| Bg.1 a, (\lam a => \case Bf.2.1 a \with { inP bfs => \case Bg.2.1 a \with { inP bgs =>
      inP (\case bfs \with {
        | inl bfsa => inl (inP (inl bfsa))
        | inr fp => \case bgs \with {
          | inl bgsa => inl (inP (inr bgsa))
          | inr gp => inr (pmap g fp *> gp)
        }
      })
    }}, \case Bf.2.2 \with { inP bffn => \case Bg.2.2 \with { inP bgfn =>
      \let | fn : \Pi (Either (Fin ff.2.1) (Fin gf.2.1)) -> \Sigma (a : A) (Bf.1 a ||| Bg.1 a) =>
                   \lam r => \case r \with {
                               | inl c => ((bffn.1 c).1, inP (inl (bffn.1 c).2))
                               | inr c => ((bgfn.1 c).1, inP (inr (bgfn.1 c).2))
                             }
           | fnSurj : isSurj fn => \lam r => \case inP-helper r.2 \with { inP r2pf => \case either-helper r2pf.1 \with {
                     | inl c => \case bffn.2 (r.1, c.1) \with {
                         | inP p => inP (inl p.1, inP-map (\lam pf =>
                           \let pfdt => sigma-eq-ext (\lam a => Bf.1 a) {bffn.1 p.1} {(r.1, c.1)} pf
                            \in sigma-ext-eq (\lam a => Bf.1 a ||| Bg.1 a) {((bffn.1 p.1).1, inP (inl (bffn.1 p.1).2))} {r} (pfdt.1,
                                inv (r2pf.2 *> pmap inP c.2 *> pmap (inP `o inl) (inv pfdt.2) *> inv {?}))
                         ) p.2)
                       }
                     | inr c => \case bgfn.2 (r.1, c.1) \with {
                         | inP p => inP (inr p.1, inP-map (\lam pf =>
                           \let pfdt => sigma-eq-ext (\lam a => Bg.1 a) {bgfn.1 p.1} {(r.1, c.1)} pf
                            \in sigma-ext-eq (\lam a => Bf.1 a ||| Bg.1 a) {((bgfn.1 p.1).1, inP (inr (bgfn.1 p.1).2))} {r} (pfdt.1,
                                inv (r2pf.2 *> pmap inP c.2 *> pmap (inP `o inr) (inv pfdt.2) *> inv {?}))
                         ) p.2)
--   coe (\lam i => Bf.1 (pf @ i).1 ||| Bg.1 (pf @ i).1) (inP (inr (bgfn.1 p.1).2)) right = r.2
                       }
                   } }
       \in inP (fn `o fin-partition, compSurjIsSurj fin-partition fn {fin-partition-isSurj} {fnSurj})
    }}))
  }}))

\function finiteIdentity {A : \Set} : \Sigma (f : A -> A) (finitePerm f) =>
  (id, ((id, (idp, idp)), (0, inP ((\lam a => False), (\lam a => inP (inr idp), inP (\lam a => \case a \with {}, \lam b => \case b.2 \with {}))))))

\function inP-map {A B : \Type} (f : A -> B) (a : TrP A) : TrP B => \elim a
  | inP v => inP (f v)

\function finiteInverse {A : \Set} (f : A -> A) (ff : finitePerm f) : \Sigma (g : A -> A) (finitePerm g) =>
  ((permInverse f ff.1).1, ((permInverse f ff.1).2, (ff.2.1, \case ff.2.2 \with {
    inP Bp => inP (Bp.1, (\lam a => inP-map (map-inr (\lam p => inv (pmap ff.1.1 p) *> fun-ext-inv ff.1.2.2 a)) (Bp.2.1 a), Bp.2.2))
  })))
