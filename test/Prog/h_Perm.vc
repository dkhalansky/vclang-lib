\open ::Data::Nat::Base
\open ::Prog::g_Bijection
\open ::Sets
\open ::PropLogic
\open ::Equiv
\open ::Combinators
\open ::Paths
\open ::Hlevel
\open ::Data::Fin
\open ::Data::Either

-- Permutation group

\function isPerm {A : \Set} (f : A -> A) : \Set => isBij f

\function permCompIsPerm {A : \Set} (f : A -> A) (g : A -> A) (fp : isPerm f) (gp : isPerm g) : isPerm (g `o f) => bijCompIsBij f g fp gp

\function permIdentity {A : \Set} : \Sigma (f : A -> A) (isBij f) => (id, (id, (idp, idp)))

\function permInverse {A : \Set} (f : A -> A) (fp : isPerm f) : \Sigma (g : A -> A) (isPerm g) => (fp.1, (f, (fp.2.2, fp.2.1)))

-- Finiteness

\function subsetIsFinite {A : \Set} (B : A -> \Prop) (n : Nat) : \Prop => exists (\lam (f : Fin n -> (\Sigma (a : A) (B a))) => isSurj f)

\function isPermSupport {A : \Set} (f : A -> A) (B : A -> \Prop) : \Prop => \Pi (a : A) -> B a ||| (f a = a)

-- Finite permutation group

\function finitePerm {A : \Set} (f : A -> A) : \Set => \Sigma (isPerm f) (\Sigma (n : Nat) (exists (\lam B => isPermSupport f B &&& subsetIsFinite B n)))

\function finiteCompIsFinite {A : \Set} (f : A -> A) (g : A -> A) (ff : finitePerm f) (gf : finitePerm g) : finitePerm (g `o f) =>
  (permCompIsPerm f g ff.1 gf.1, (ff.2.1 + gf.2.1, \case ff.2.2 \with { inP Bf => \case gf.2.2 \with { inP Bg =>
    inP (\lam a => Bf.1 a ||| Bg.1 a, (\lam a => \case Bf.2.1 a \with { inP bfs => \case Bg.2.1 a \with { inP bgs =>
      inP (\case bfs \with {
        | inl bfsa => inl (inP (inl bfsa))
        | inr fp => \case bgs \with {
          | inl bgsa => inl (inP (inr bgsa))
          | inr gp => inr (pmap g fp *> gp)
        }
      })
    }}, \case Bf.2.2 \with { inP bffn => \case Bg.2.2 \with { inP bgfn => 
      inP (\lam a => {?}, \lam a => {?})
    }}))
  }}))

\function finiteIdentity {A : \Set} : \Sigma (f : A -> A) (finitePerm f) =>
  (id, ((id, (idp, idp)), (0, inP ((\lam a => False), (\lam a => inP (inr idp), inP (\lam a => \case a \with {}, \lam b => \case b.2 \with {}))))))

\function inP-map {A B : \Type} (f : A -> B) (a : TrP A) : TrP B => \elim a
  | inP v => inP (f v)

\function finiteInverse {A : \Set} (f : A -> A) (ff : finitePerm f) : \Sigma (g : A -> A) (finitePerm g) =>
  ((permInverse f ff.1).1, ((permInverse f ff.1).2, (ff.2.1, \case ff.2.2 \with {
    inP Bp => inP (Bp.1, (\lam a => inP-map (map-inr (\lam p => inv (pmap ff.1.1 p) *> fun-ext-inv ff.1.2.2 a)) (Bp.2.1 a), Bp.2.2))
  })))
