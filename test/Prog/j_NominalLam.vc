\open ::Data::Nat::Base
\open ::Data::Nat::Properties
\open ::Data::Nat::Compare
\open ::Data::Either
\open ::Paths
\open ::Prog::c_Lam
\open ::Prog::h_Perm
\open ::Logic
\open ::Relation
\open ::Data::List \hiding (concat)
\open ::Data::List::In
\open ::Data::Empty

\data FreshIn (v : Nat) (b : Lam) \with
  | v, var a => fresh_in_var (a != v)
  | v, app a b => fresh_in_app (FreshIn v a) (FreshIn v b)
  | v, lam a b => fresh_in_lam (a != v) (FreshIn v b)

\function dirty (v : Lam) : List Nat => \elim v
  | var a   => a :-: nil
  | app a b => dirty a ++ dirty b
  | lam v b => v :-: dirty b

\function not-dirty-is-fresh (v : Lam) (n : Nat)
  (clean : Not (n `AppearsIn dirty v)) : n `FreshIn v => \elim v
  | var a => fresh_in_var (\lam eq => clean (here (inv eq)))
  | app a b => fresh_in_app
      (not-dirty-is-fresh a n (\lam x => clean (appears-in-append-right x (dirty b))))
      (not-dirty-is-fresh b n (\lam x => clean (appears-in-append-left  (dirty a) x)))
  | lam v b => fresh_in_lam (\lam eq => clean (here (inv eq)))
      (not-dirty-is-fresh b n (\lam x => clean (there x)))

\function fresh (v : Lam) : Nat => \elim v
  | var a => suc a
  | app a b => fresh a + fresh b
  | lam v b => suc (v + fresh b)

\function not-appears-in-nil {A : \Type} {a : A} (v : a `AppearsIn nil) : Empty => \elim v

\function suc-a-ne-a (a : Nat) : suc a != a => \elim a
  | zero  => \lam ctr => zero-ne-suc (inv ctr)
  | suc a => \lam ctr => (suc-a-ne-a a) (eq-unsuc ctr)

\function le_refl (a : Nat) : a `Le a => \elim a
  | zero => le_z
  | suc a => le_ss (le_refl a)

\function le_suc {n m : Nat} (p : n `Le m) : (n `Le suc m) => \elim n, m, p
  | zero, m, le_z => le_z
  | suc n, suc m, le_ss p => le_ss (le_suc p)

\function le_plus_left (n m : Nat) : (m `Le n + m) => \elim n
  | zero => le_refl m
  | suc n => le_suc (le_plus_left n m)

\function le_plus_right (m n : Nat) : (m `Le m + n) =>
  transport (\lam x => m `Le x) (plus-comm n m) (le_plus_left n m)

\function fresh-larger-than-dirty (v : Lam) (c : Nat) (cd : c `AppearsIn dirty v) : fresh v `Gt c => \elim v
  | var a => \case cd \with {
      | here h => transport (\lam x => Lt x (suc a)) (inv h) (le_refl (suc a))
      | there t => absurd (not-appears-in-nil t)
    }
  | app a b => \case appears-in-concat (dirty a) (dirty b) c cd \with {
      | inl xs => le-trans (fresh-larger-than-dirty a c xs) (le_plus_right (fresh a) (fresh b))
      | inr ys => le-trans (fresh-larger-than-dirty b c ys) (le_plus_left  (fresh a) (fresh b))
    }
  | lam v b => \case cd \with {
      | here h => le_ss (transport (\lam x => Le c (x + fresh b)) h (le_plus_right c (fresh b)))
      | there t => le-trans (fresh-larger-than-dirty b c t) (le_plus_left (suc v) (fresh b))
    }

\function le-ngt {n m : Nat} (p : m `Le n) : Not (m `Gt n) => \elim n, m, p
  | _, zero, le_z => \lam q => suc_nle_zero q
  | suc n, suc m, le_ss p => \lam q => (le-ngt p) (Le_unsuc q)

\function gt-ne {n m : Nat} (p : n `Gt m) : n != m =>
  \lam ctr => (le-ngt p) (le_ss (transport (\lam x => Le n x) ctr (le_refl n)))

\function not_appears_different_from_all {A : \Type} {v : List A} (e : A)
    (ctr : \Pi (a : A) -> (\Pi (c : a `AppearsIn v) -> (e != a)))
    (p : e `AppearsIn v) : Empty => \elim v, p
  | `:-: x xs, here h  => ctr x (here idp) h
  | `:-: x xs, there t => not_appears_different_from_all e
      (\lam a p => ctr a (there p)) t

\function fresh-is-fresh (v : Lam) : FreshIn (fresh v) v =>
  not-dirty-is-fresh v (fresh v)
    (not_appears_different_from_all (fresh v)
      (\lam a c => gt-ne (fresh-larger-than-dirty v a c)))

\function lam_ops (b : Lam) : Nat => \elim b
  | var a => 0
  | app a b => suc (lam_ops a + lam_ops b)
  | lam v b => suc (lam_ops b)

\function replace-nat (v n c : Nat) : Nat => \case v =? c \with {
    | inl p => n
    | inr q => c
  }

\function replace (v n : Nat) (b : Lam) : Lam => \elim b
  | var a => var (replace-nat v n a)
  | app a b => app (replace v n a) (replace v n b)
  | lam r b => lam (replace-nat v n r) (replace v n b)

\function replace-preserves-structure (v n : Nat) (b : Lam) : lam_ops b = lam_ops (replace v n b) => \elim b
  | var a => idp
  | app a b => pmap suc (pmap2 `+ (replace-preserves-structure v n a) (replace-preserves-structure v n b))
  | lam r b => pmap suc (replace-preserves-structure v n b)

\data Alpha (a b : Lam) \with
  | var a, var b => alpha_var (a = b)
  | app a b, app a' b' => alpha_app (Alpha a a') (Alpha b b')
  | lam v b, lam v' b' => alpha_lam (a : Nat)
        (a `FreshIn (lam v b)) (a `FreshIn (lam v' b'))
        (Alpha (replace v a b) (replace v' a b'))

\function plus_le_right (n m : Nat) : m `Le (m + n) => \elim m
  | zero  => le_z
  | suc m => le_ss (plus_le_right n m)

\function plus_le_left (n m : Nat) : m `Le (n + m) =>
  transport (\lam x => m `Le x) (plus-comm m n) (plus_le_right n m)

\function alpha_refl (b : Lam) (n : Nat) (p : lam_ops b `Le n) : Alpha b b => \elim b, n, p
  | var a, zero, le_z  => alpha_var idp
  | var a, suc n, le_z => alpha_var idp
  | app a b, suc n, le_ss p => alpha_app
      (alpha_refl a n (le-trans (plus_le_right (lam_ops b) (lam_ops a)) p))
      (alpha_refl b n (le-trans (plus_le_left  (lam_ops a) (lam_ops b)) p))
  | lam v b, suc n, le_ss p => alpha_lam (fresh (lam v b))
    (fresh-is-fresh (lam v b)) (fresh-is-fresh (lam v b))
    (alpha_refl (replace v (suc (v + fresh b)) b) n (transport (\lam x => Le x n) (replace-preserves-structure v (suc (v + fresh b)) b) p))

\function AlphaRefl : Reflexive Alpha => \lam b => alpha_refl b (lam_ops b) (le_refl (lam_ops b))

\function sym_alpha (a b : Lam) (p : Alpha a b) (n : Nat) (r : lam_ops b `Le n) : Alpha b a => \elim a, b, p, n, r
  | var a, var b, alpha_var p, zero, le_z => alpha_var (inv p)
  | var a, var b, alpha_var p, suc n, le_z => alpha_var (inv p)
  | app a b, app a' b', alpha_app ap bp, suc n, le_ss p =>
      alpha_app (sym_alpha a a' ap n (le-trans (plus_le_right (lam_ops b') (lam_ops a')) p))
                (sym_alpha b b' bp n (le-trans (plus_le_left  (lam_ops a') (lam_ops b')) p))
  | lam v b, lam v' b', alpha_lam a fa fb gp, suc n, le_ss p => alpha_lam a fb fa
      (sym_alpha (replace v a b) (replace v' a b') gp n
        (transport (\lam x => Le x n) (replace-preserves-structure v' a b') p))

\function AlphaSym : Symmetric Alpha => \lam a b p => sym_alpha a b p (lam_ops b) (le_refl (lam_ops b))

\function trans_alpha (a b c : Lam) (pab : Alpha a b) (pbc : Alpha b c) (n : Nat) (r : lam_ops b `Le n) : Alpha a c => \elim a, b, c, pab, pbc, n, r
  | var a, var b, var c, alpha_var pab, alpha_var pbc, zero,  le_z => alpha_var (pab *> pbc)
  | var a, var b, var c, alpha_var pab, alpha_var pbc, suc n, le_z => alpha_var (pab *> pbc)
  | app aa ab, app ba bb, app ca cb, alpha_app paba pabb, alpha_app pbca pbcb, suc n, le_ss p => alpha_app
    (trans_alpha aa ba ca paba pbca n (le-trans (plus_le_right (lam_ops bb) (lam_ops ba)) p))
    (trans_alpha ab bb cb pabb pbcb n (le-trans (plus_le_left  (lam_ops ba) (lam_ops bb)) p))
  | lam av ab, lam bv bb, lam cv cb, alpha_lam aba abfa abfb abgp, alpha_lam bca bcfb bcfc bcgp, suc n, le_ss p =>
    alpha_lam {?} {?} {?} {?}
