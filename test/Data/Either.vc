\import Data.Bool
\import Data.Unit
\import Data.Empty

\data Either (A B : \Type)
    | inl A
    | inr B

\func is-left {L R : \Type} (e : Either L R) : \Prop \elim e
    | inl _ => Unit
    | inr _ => Empty

\func is-right {L R : \Type} (e : Either L R) : \Prop \elim e
    | inl _ => Empty
    | inr _ => Unit

\func map-inl {L L' R : \Type} (f : L -> L') (e : Either L R) : Either L' R \elim e
    | inl l => inl (f l)
    | inr r => inr r

\func map-inr {L R R' : \Type} (f : R -> R') (e : Either L R) : Either L R' \elim e
    | inl l => inl l
    | inr r => inr (f r)

\func inl' : Either Unit Unit => inl unit

\func inr' : Either Unit Unit => inr unit

\func if' {A L R : \Type} (e : Either L R) (then else : A) : A \elim e
    | inr _ => then
    | inl _ => else
