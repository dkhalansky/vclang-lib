\data List (A : \Type)
    | nil
    | \infixr 5 :-: A (List A)

\function
singleton {A : \Type} (a : A) => a :-: nil

\function
headDefault {A : \Type} (default : A) (xs : List A) : A => \elim xs
    | nil => default
    | :-: x _ => x

\function
tail {A : \Type} (xs : List A) : List A
    | nil => nil
    | :-: _ xs => xs

\function \infixr 5
++ {A : \Type} (xs ys : List A) : List A => \elim xs
    | nil => ys
    | :-: x xs => x :-: xs ++ ys

\function
snoc {A : \Type} (xs : List A) (x : A) => xs ++ singleton x

\import Data.Bool

\function
null {A : \Type} (xs : List A) : Bool
    | nil => true
    | _ => false

\function
map {A B : \Type} (f : A -> B) (xs : List A) : List B => \elim xs
    | nil => nil
    | :-: x xs => f x :-: map f xs

\function
replicate {A : \Type} (n : Nat) (a : A) : List A => \elim n
    | zero => nil
    | suc n => a :-: replicate n a

\function
zipWith {A B C : \Type} (f : A -> B -> C) (xs : List A) (ys : List B) : List C => \elim xs, ys
    | nil, _ => nil
    | _, nil => nil
    | :-: x xs, :-: y ys => f x y :-: zipWith f xs ys

\function
zip {A B : \Type} => zipWith (\lam (x : A) (y : B) => (x, y))

\function
intersperse {A : \Type} (x : A) (xs : List A) : List A => \elim xs
    | nil => nil
    | :-: x' nil => singleton x'
    | :-: x' xs' => x' :-: x :-: intersperse x xs'


\function
foldr {A B : \Type} (f : A -> B -> B) (b : B) (xs : List A) : B => \elim xs
    | nil => b
    | :-: x xs => f x (foldr f b xs)

\function
foldl {A B : \Type} (f : A -> B -> A) (xs : List B) (a : A) : A => \elim xs
    | nil => a
    | :-: x xs => foldl f xs (f a x)

\function
concat {A : \Type} : List (List A) -> List A => foldr (++) nil

\function
concatMap {A B : \Type} (f : A -> List B) (xs : List A) => concat (map f xs)

\import Data.Nat.Base(+, *)

\function sum => foldr (+) 0

\function product => foldr (*) 1

\function
length {A : \Type} => foldr (\lam (_ : A) => suc) 0

\function
reverse {A : \Type} (xs : List A) : List A => foldl (\lam xs x => x :-: xs) xs nil

\function
take {A : \Type} (n : Nat) (xs : List A) : List A
    | zero, _ => nil
    | suc _, nil => nil
    | suc n, :-: x xs => x :-: take n xs

\function
drop {A : \Type} (n : Nat) (xs : List A) : List A
    | zero, xs => xs
    | suc _, nil => nil
    | suc n, :-: x xs => drop n xs

\function
splitAt {A : \Type} (n : Nat) (xs : List A) : \Sigma (List A) (List A)
    | zero, xs => (nil, xs)
    | suc _, nil => (nil, nil)
    | suc n, :-: x xs => \let p => splitAt n xs
                          \in (x :-: p.1, p.2)

\function
takeWhile {A : \Type} (p : A -> Bool) (xs : List A) : List A => \elim xs
    | nil => nil
    | :-: x xs => \case p x \with {
        | true => x :-: takeWhile p xs
        | false => nil
    }

\function
dropWhile {A : \Type} (p : A -> Bool) (xs : List A) : List A => \elim xs
    | nil => nil
    | :-: x xs => \case p x \with {
        | true => dropWhile p xs
        | false => x :-: xs
    }

\function
span {A : \Type} (p : A -> Bool) (xs : List A) : \Sigma (List A) (List A) => \elim xs
    | nil => (nil, nil)
    | :-: x xs => \case p x \with {
        | true => \let s => span p xs
                  \in (x :-: s.1, s.2)
        | false => (nil, x :-: xs)
    }

\function
break {A : \Type} (p : A -> Bool) => span (\lam (a : A) => not (p a))

\function
inits {A : \Type} (xs : List A) : List (List A)
    | nil => nil :-: nil
    | :-: x xs => nil :-: map (x :-:) (inits xs)

\function
tails {A : \Type} (xs : List A) : List (List A)
    | nil => nil :-: nil
    | :-: x xs => (x :-: xs) :-: tails xs

\import Data.Maybe

\function
gfilter {A B : \Type} (f : A -> Maybe B) (xs : List A) : List B => \elim xs
    | nil => nil
    | :-: x xs => maybe (gfilter f xs) (\lam b => b :-: gfilter f xs) (f x)

\function
filter {A : \Type} (f : A -> Bool) => gfilter (\lam (a : A) => if (f a) (just a) nothing)

\function
partition {A : \Type} (f : A -> Bool) (xs : List A) : \Sigma (List A) (List A) => \elim xs
    | nil => (nil, nil)
    | :-: x xs => \let p => partition f xs
                   \in if (f x) (x :-: p.1, p.2) (p.1, x :-: p.2)
