\import Paths
\import Combinators
\import Data.Fin

\import Data.Nat.Base

\func reveal {n : Nat} (x : Fin n) : \Sigma (m : Nat) (n = suc m) \elim n, x
    | suc n, _ => (n, idp)

\func cast {n : Nat} (x : Fin n) : \Sigma (m : Nat) (Fin (suc m)) \elim n, x
    | suc n, x => (n, x)

\func from-to-id (n : Nat) : to-nat (from-nat n) = n \elim n
    | suc n => pmap suc $ from-to-id n
    | zero => idp

-- \func to-from-id {n : Nat} (x : Fin n) (e : Empty) : from-nat (to-nat x) = x => absurd e

\func flift-id {n : Nat} (m : Nat) (fn : Fin n) : to-nat fn = to-nat (flift m fn) \elim n, fn
    | suc n', fzero => idp
    | suc n', fsuc fn' => pmap suc (flift-id m fn')

\func fadd-adds {n : Nat} (m : Nat) (fn : Fin n) : m + to-nat fn = to-nat (fadd m fn) \elim m
    | zero => idp
    | suc m' => pmap suc $ fadd-adds m' fn

\import Data.Nat.Properties

\func bounded {n : Nat} (fn : Fin n) : to-nat fn =< n \elim n, fn
    | suc n', fzero => pmap pred (zero-minus n')
    | suc n', fsuc fn' => transport (\lam x => x = 0) (inv (pred-suc-minus (to-nat fn') n')) (bounded fn')
