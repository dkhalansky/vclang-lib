\import HedbergTheorem
\import Paths
\import Data.Nat.Properties
\import Data.Either
\import Logic
\import Combinators

\data Int
  | pos Nat
  | neg Nat \with { zero => pos zero }

\func zeroZ => pos zero

\func sucZ (x : Int) : Int
   | pos n => pos (suc n)   
   | neg (suc n) => neg n

\func predZ (x : Int) : Int
   | pos (suc n) => pos n
   | pos zero => neg (suc zero)
   | neg n => neg (suc n)

\func absZ (x : Int) : Nat
   | pos n => n
   | neg n => n

\func negZ (n : Int) : Int
   | pos n => neg n
   | neg n => pos n

\func \infixl 6 +$ (n m : Int) : Int \elim n
  | pos zero => m
  | pos (suc n) => sucZ ((pos n) +$ m)
  | neg zero => m
  | neg (suc n) => predZ ((neg n) +$ m)

\func \infixl 6 -$ (n m : Int) => n +$ negZ m

\func \infixl 7 *$ (n m : Int) : Int \elim n
  | pos zero => pos zero
  | pos (suc n) => (pos n) *$ m +$ m
  | neg zero => neg zero
  | neg (suc n) => (neg n) *$ m -$ m

-- \func zero-neqZ (n : Nat) : ((pos (suc n) != zeroZ) && (neg (suc n) != zeroZ)) => (\lam (p-eq : pos (suc n) = zeroZ) => zero-ne-suc (inv (pmap absZ p-eq)), \lam (p-eq : pos (suc n) = zeroZ) => zero-ne-suc (inv (pmap absZ p-eq)))

\func sucZ-predZ-linv (x : Int) : predZ (sucZ x) = x
	| pos n => idpe (pos n)
	| neg (suc n) => idpe (neg (suc n))

\func sucZ-predZ-rinv (x : Int) : sucZ (predZ x) = x
	| pos (suc n) => idpe (pos (suc n))
	| neg n => idpe (neg n)
	| pos zero => idpe (pos zero)

--  (_ : decidable-eq (pos l) (predZ m))

\func Int-decEq (n m : Int) : Dec (n = m)
   | pos (suc l), m =>  \case Int-decEq (pos l) (predZ m) \with {
                            | inr p-eq => inr (
                                pos (suc l)     ==< pmap sucZ p-eq      >==
                                sucZ (predZ m)  ==< sucZ-predZ-rinv m   >==
                                m               `qed)
                            | inl p-neq => inl (\lam (p-eq : pos (suc l) = m) => p-neq (pos l ==< pmap predZ p-eq >== predZ m `qed))
                        }
   | pos zero, pos zero => inr idp 
   | pos zero, pos (suc l) => inl (\lam (p-eq : pos zero = pos (suc l)) => zero-ne-suc (pmap absZ p-eq))				   
   | pos zero, neg (suc l) => inl (\lam (p-eq : pos zero = neg (suc l)) => zero-ne-suc (pmap absZ p-eq))	
   | neg (suc l), m =>  \case Int-decEq (neg l) (sucZ m) \with {
                            | inr p-eq => inr (
                                neg (suc l)     ==< pmap predZ p-eq     >==
                                predZ (sucZ m)  ==< sucZ-predZ-linv m   >== m
                                `qed)
                            | inl p-neq => inl (\lam (p-eq : neg (suc l) = m) => p-neq (neg l ==< pmap sucZ p-eq >== sucZ m `qed))
                        }

\func Int-isSet => Hedberg-thm Int-decEq
