\import Data.Empty

\data Vector (n : Nat) (A : \Type) => \elim n
    | zero  => vnil
    | suc n => \infixr 5 :^ A (Vector n A)

\function
singleton {A : \Type} (a : A) : Vector 1 A => a :^ vnil

\import Data.Unit

\function
head {n : Nat} {A : \Type} (xs : Vector (suc n) A) : A => \elim xs
    | :^ x _ => x

\function
tail {n : Nat} {A : \Type} (xs : Vector (suc n) A) : Vector n A => \elim xs
    | :^ _ xs => xs

\import Data.Nat.Base

\function \infixr 5
+^ {n m : Nat} {A : \Type} (xs : Vector n A) (ys : Vector m A) : Vector (n + m) A => \elim n, xs
    | zero, vnil => ys
    | suc n', :^ x xs' => x :^ xs' +^ ys

\import Data.Fin

\function
lookup {n : Nat} {A : \Type} (xs : Vector n A) (i : Fin n) : A => \elim n, xs, i
    | suc n', :^ x xs', fzero => x
    | suc n', :^ x xs', fsuc i' => lookup xs' i'

\function
update {n : Nat} {A : \Type} (xs : Vector n A) (i : Fin n) (x : A) : Vector n A => \elim n, xs, i
    | suc n', :^ x' xs', fzero => x :^ xs'
    | suc n', :^ x' xs', fsuc i' => x' :^ update xs' i' x
