\import Data.Nat.Base
\import Data.Nat.Properties

\import Combinators
\import Data.Either
\import Data.Empty
\import Data.Unit
\import Paths
\import Relation
\import Logic

\function
cmp (n m : Nat) : Tri (n Lt m) (n = m) (n Gt m) => \elim n, m
  | zero, zero => tri_eq suc_nle_zero idp suc_nle_zero
  | zero, suc m' => tri_lt (le_ss le_z) zero-ne-suc suc_nle_zero
  | suc n', zero => tri_gt suc_nle_zero (\lam p => zero-ne-suc (inv p)) (le_ss le_z)
  | suc n', suc m' => \case cmp n' m' \with {
    | tri_lt lt neq ngt => tri_lt (le_ss lt) (\lam p => neq (pmap pred p)) (ngt o Le_unsuc)
    | tri_eq nlt eq ngt => tri_eq (nlt o Le_unsuc) (pmap suc eq) (ngt o Le_unsuc)
    | tri_gt nlt neq gt => tri_gt (nlt o Le_unsuc) (\lam p => neq (pmap pred p)) (le_ss gt)
  }

\function
Lt-dec (n m : Nat) : Dec (n Lt m) => \elim n, m
  | _, zero => inl suc_nle_zero
  | zero, suc m' => inr (le_ss le_z)
  | suc n', suc m' => \case Lt-dec n' m' \with {
    | inl p => inl (\lam q => p (Le_unsuc q))
    | inr q => inr (le_ss q)
  }

\function \infix 2
=? (x y : Nat) : Dec (x = y) => \elim x, y
    | suc x', suc y' => sdec (x' =? y')
    | suc _, zero => inl (\lam p => transport is_suc p unit)
    | zero, zero => inr idp
    | zero, suc y => inl (\lam p => transport is_zero p unit)

\function
Le-dec (x y : Nat) : Dec (x Le y) => \elim x, y
    | zero, _ => inr le_z
    | suc x', zero => inl suc_nle_zero
    | suc x', suc y' => \case Le-dec x' y' \with {
       | inl nleq => inl (nleq o Le_unsuc)
       | inr leq => inr (le_ss leq)
    }

\function \infix 2
=<? (n m : Nat) : Dec (n =< m) => n - m =? 0
