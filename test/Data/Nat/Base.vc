\import Combinators

\func pred (x : Nat) : Nat
    | zero => 0
    | suc x' => x'

\func \infixl 6 + (x y : Nat) : Nat \elim x
    | zero => y
    | suc x' => suc $ x' + y

\func \infixl 7 * (x y : Nat) : Nat \elim x
    | zero => zero
    | suc x' => y + (x' * y)

\func \infixl 6 - (x y : Nat) : Nat \elim y
    | zero => x
    | suc y' => pred $ x - y'

\func \infix 4 =< (n m : Nat) => n - m = 0

\func \infix 4 < (n m : Nat) => suc n =< m

\func \infix 4 > (n m : Nat) => m < n

\data \infix 4 Le (n m : Nat) \with
  | zero, m => le_z
  | suc n, suc m => le_ss (n Le m)

\func \infix 4 Lt (n m : Nat) => suc n Le m

\func \infix 4 Gt (n m : Nat) => m Lt n
