\import Data.Nat.Base

\import Combinators
\import Data.Bool
\import Data.Either
\import Data.Empty
\import Data.Unit
\import Logic
\import Paths
\import Relation

\func is_zero_b (x : Nat) : Bool
    | zero => true
    | _ => false

\func is_zero : Nat -> \Prop => True o is_zero_b

\func is_suc : Nat -> \Prop => True o not o is_zero_b

\func suc_nle_zero {n : Nat} (p : suc n Le zero) : Empty

\func Le_unsuc {n m : Nat} (sn-le-sm : (suc n) Le (suc m)) : n Le m
  | le_ss p => p

\func zero-ne-suc {n : Nat} (p : 0 = suc n) : Empty => transport is_zero p unit

\func n-lt-n-false (n : Nat) (p : n Lt n) : Empty
  | suc n', le_ss p' => n-lt-n-false n' p'

\func lt-ngt {n m : Nat} (p : n Lt m) : Not (n Gt m)
  | {zero}, m' => \lam q => suc_nle_zero q
  | {suc n'}, {suc m'}, le_ss p' => \lam q => lt-ngt p' (Le_unsuc q)

\func le-trans {n m k : Nat} (nm : n Le m) (mk : m Le k) : n Le k \elim n, m, k
  | zero, m', _ => le_z
  | suc n', zero, _ => absurd (suc_nle_zero nm)
  | suc n', suc m', zero => absurd (suc_nle_zero mk)
  | suc n', suc m', suc k' => le_ss (le-trans (Le_unsuc nm) (Le_unsuc mk))

\func lt-then-le {n m : Nat} (nm : n Lt m) : n Le m \elim n, m
  | zero, _ => le_z
  | suc n', zero => absurd (suc_nle_zero nm)
  | suc n', suc m' => le_ss (lt-then-le (Le_unsuc nm))

\func lt-trans {n m k : Nat} (nm : n Lt m) (mk : m Lt k) : n Lt k => le-trans nm (lt-then-le mk)

\func sdec {x y : Nat} (d : Dec (x = y)) : Dec (suc x = suc y)
    | inl f => inl (\lam p => f $ pmap pred p)
    | inr p => inr $ pmap suc p

\func plus-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim x
    | zero => path (\lam _ => y + z)
    | suc x' => path (\lam i => suc (plus-assoc x' y z @ i))

\func plus-comm0 (y : Nat) : y = y + zero
    | zero => idp
    | suc y' => pmap suc (plus-comm0 y')

\func plus-comm (x y : Nat) : x + y = y + x
    | zero, y => plus-comm0 y
    | suc x', zero => inv (plus-comm0 (suc x'))
    | suc x', suc y' => pmap suc (plus-comm x' (suc y') *> pmap suc (inv (plus-comm x' y')) *> plus-comm (suc x') y')

\func mul-distr (x y z : Nat) : (x + y) * z = x * z + y * z \elim x
    | zero => idp
    | suc x' => pmap (\lam t => z + t) (mul-distr x' y z) *> inv (plus-assoc z (x' * z) (y * z))

\func mul-assoc (x y z : Nat) : (x * y) * z = x * (y * z) \elim x
    | zero => idp
    | suc x' => mul-distr y (x' * y) z *> pmap (\lam t => y * z + t) (mul-assoc x' y z)

\func mul-comm0 (y : Nat) : zero = y * zero
    | zero => idp
    | suc y' => mul-comm0 y'

\func mul-comm (x y : Nat) : x * y = y * x
    | zero, y => mul-comm0 y
    | suc x', zero => inv (mul-comm0 x')
    | suc x', suc y' => pmap suc (
            y' + (x' * suc y')      ==< pmap (\lam t => y' + t) (mul-comm x' (suc y'))      >==
            y' + (x' + y' * x')     ==< inv (plus-assoc y' x' (y' * x'))                    >==
            y' + x' + y' * x'       ==< pmap (\lam t => t + y' * x') (plus-comm y' x')      >==
            x' + y' + y' * x'       ==< pmap (\lam t => x' + y' + t) (inv (mul-comm x' y')) >==
            x' + y' + x' * y'       ==< plus-assoc x' y' (x' * y')                          >==
            x' + (y' + x' * y')     ==< pmap (\lam t => x' + t) (mul-comm (suc x') y')      >==
            x' + y' * suc x'        `qed)

\func zero-minus (x : Nat) : 0 - x = 0
  | zero => idp
  | suc x' => pmap pred (zero-minus x')

\func pred-suc-minus (x y : Nat) : pred (suc x - y) = x - y \elim y
  | zero => idp
  | suc y' => pmap pred (pred-suc-minus x y')

\func pred-assoc (x y : Nat) : pred (x - y) = (pred x) - y
  | _, zero => idp
  | zero, suc y' =>
      pred (pred (0 - y'))  ==< pmap (pred o pred) (zero-minus y') >==
      pred (pred 0)         ==< pmap pred (inv (zero-minus y')) >==
      pred (0 - y')         `qed
  | suc x', suc y' => pmap pred (pred-suc-minus x' y')

\func le_unsuc {x y : Nat} (le : suc x =< suc y) : x =< y =>
  transport (\lam a => a = 0) (pred-suc-minus x y) le

\func le1-then-le2 {x y : Nat} (le : x =< y) : x Le y \elim x, y
  | zero, _ => le_z
  | suc x', zero => absurd (zero-ne-suc $ inv le)
  | suc x', suc y' => le_ss (le1-then-le2 (le_unsuc le))

\func le2-then-le1 {x y : Nat} (le : x Le y) : x =< y \elim x, y, le
  | zero, zero, _ => idp
  | zero, suc y', _ => pmap pred (zero-minus y')
  | suc x', suc y', le_ss le' => transport (\lam a => a = 0) (inv (pred-suc-minus x' y')) (le2-then-le1 le')

\func le1-equiv-le2 (x y : Nat) : (x Le y) <-> (x =< y) => (le2-then-le1, le1-then-le2)
