\import Combinators

\data Fin (n : Nat) \with
    | suc n => fzero
    | suc n => fsuc (Fin n)

\func to-nat {n : Nat} (x : Fin n) : Nat \elim n, x
    | suc _, fzero => zero
    | suc _, fsuc x => suc $ to-nat x

\func from-nat (n : Nat) : Fin (suc n) \elim n
    | suc n' => fsuc $ from-nat n'
    | zero => fzero

\import Data.Nat.Base(+)

\func flift {n : Nat} (m : Nat) (fn : Fin n) : Fin (n + m) \elim n, fn
    | suc n', fzero => fzero
    | suc n', fsuc fn' => fsuc (flift m fn')

\func fadd {n : Nat} (m : Nat) (fn : Fin n) : Fin (m + n) \elim m
    | zero => fn
    | suc m' => fsuc (fadd m' fn)

-- \func inf-fin {n : Nat} (x : Fin n) : \Set0 => Fin (to-nat x)
