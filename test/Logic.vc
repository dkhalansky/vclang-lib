\import Paths
\import Data.Unit
\import Data.Empty
\import Data.Either

\function \infixr 3
&& (A B : \Type) => \Sigma A B

\function \infixr 2
|| (A B : \Type) => Either A B

\function \infix 4
!= {A : \Type} (a b : A) => Not (a = b)

\function \infix 4
<-> (A B : \Type) => (A -> B) && (B -> A)

\function
contraposition {A B : \Type} (f : A -> B) (nb : Not B) : Not A =>
    \lam a => nb (f a)

\function
contraposition2 {A B : \Type} (f : A -> Not B) (b : B) : Not A =>
    \lam a => f a b

\function
Dec (A : \Type) => Not A || A

\function
double-neg {A : \Type} (a : A) : Not (Not A) =>
    \lam f => f a

\function
cancel-triple-neg  {A : \Type} (nnna : Not (Not (Not A))) : Not A =>
    \lam a => nnna (double-neg a)

\function
DNLaw (A : \Type) => Not (Not A) -> A

\function
dec-impl-DNLaw (A : \Type) (p : Dec A) : (DNLaw A) => \case p \with {
    | inl f => \lam g => absurd (g f)
    | inr a => \lam _ => a
}
