\import Paths
\import Hlevel
\import HITs.Spheres
\import Combinators
\import Equiv
\import Data.Nat.Base
\import Data.Nat.Properties
\import Data.Unit
\import PropLogic

\data Trunc (n : Nat) (A : \Type) 
    | inT A
    | hT (r : (S n).1 -> Trunc n A)
    | spokeT (r : (S n).1 -> Trunc n A) (x : (S n).1) (i : I) => \elim i {
        | left => r x
        | right => hT r
    }

\function
ofHlevel-Trunc (n : Nat) (A : \Type) : ofHlevel (suc n) (Trunc n A) => 
    \let TA => Trunc n A
    \in transport id (inv (ofHlevel-Omega-contr TA n))
        (\lam (b : TA) => transport id (pmap isContr (SphereOmega-adj n (TA, b))) (
            \let cb : (S n).1 -> TA => \lam x => b
            \in ((cb, idp), \lam r => (
                    \let | P => \lam (f : (S n).1 -> TA) => f (S n).2 = b
                         | A1 : cb = r.1 => fun-ext (\lam (x : (S n).1) => inv (path (spokeT r.1 x) *> inv (path (spokeT r.1 (S n).2)) *> r.2))
                         | A2 : transport P A1 idp = r.2 => coePath (pmap (\lam (f : (S n).1 -> TA) => f (S n).2) A1) idp (idpe b) *>
                             inv-inv _ *> inv (concat-assoc _ _ _) *> pmap (\lam p => p *> r.2) (concat-inv (path (spokeT r.1 (S n).2))) *> concat-idp _
                    \in sigma-ext-eq P (A1, A2)))))

\function
TruncT (n : Nat) (A : \Type) : suc n `Types => (Trunc n A, ofHlevel-Trunc n A)

\function
Trunc-UP {n : Nat} {A : \Type} {P : Trunc n A -> \Type} (nT : \Pi (x : Trunc n A) -> ofHlevel (suc n) (P x))
    (g : \Pi (a : A) -> P (inT a)) (x : Trunc n A) : P x => \elim x
    | inT a => g a
    | hT r => transport P (path (spokeT r (S n).2)) (Trunc-UP {n} {A} {P} nT g (r (S n).2))
    | spokeT r x i => pathOver (ofHlevel-sphere-map-contr (nT (hT r))
        (\lam (z : (S n).1) => transport P (path (spokeT r z)) (Trunc-UP {n} {A} {P} nT g (r z))) x) @ i

\function
ext {n : Nat} {A E : \Type} (nT : ofHlevel (suc n) E) (f : A -> E) : Trunc n A -> E 
    => Trunc-UP {n} {A} {\lam _ => E} (\lam _ => nT) f

\function
uniq {n : Nat} {A E : \Type} (nT : ofHlevel (suc n) E) (f1 f2 : Trunc n A -> E) (eq : \Pi (a : A) -> f1 (inT a) = f2 (inT a)) : f1 ~ f2 
    => \lam (x : Trunc n A) => Trunc-UP {n} {A} {\lam x => f1 x = f2 x} (\lam x => ofHlevel-suc {E} {suc n} nT (f1 x) (f2 x)) eq x

\function
Trunc-UP2 {n : Nat} (A B : \Type) (nT : ofHlevel (suc n) B) : isequiv (\lam (g : Trunc n A -> B) => g o inT) => 
    \let G => ext {n} {A} {B} nT
    \in ((G, \lam g => fun-ext (uniq nT (G (g o inT)) g (\lam _ => idp))),
            (G, \lam f => fun-ext {A} {B} {G f o inT} {f} (\lam _ => idp)))

\function
TruncUP2-equiv (A : \Type) {B : \Type} {n : Nat} (nT : ofHlevel (suc n) B) : (Trunc n A -> B) =~= (A -> B) 
    => (\lam f => f o inT, Trunc-UP2 A B nT)

\function
inM {A B : \Type} (f : A -> B) (n : Nat) : Trunc n A -> Trunc n B => ext (ofHlevel-Trunc n B) (inT o f)

-- It is obvious that
--   inM f n (inT a) = inT (f a)

\function
inM-o {A B C : \Type} (f : A -> B) (g : B -> C) (n : Nat) : inM g n o inM f n = inM (g o f) n 
    => fun-ext (uniq (ofHlevel-Trunc n C) (inM g n o inM f n) (inM (g o f) n) (\lam _ => idp))

\function
inM-id {A : \Type} (n : Nat) : inM (id {A}) n = id {Trunc n A} 
    => fun-ext (uniq (ofHlevel-Trunc n A) (inM (id {A}) n) (id {Trunc n A}) (\lam _ => idp))

\function
inH {A B : \Type} (f g : A -> B) (h : f ~ g) (n : Nat) : inM f n ~ inM g n => 
    \let | A0 : inM f n o inT = inM g n o inT => fun-ext (\lam a => pmap (\lam b => inT {n} {B} b) (h a))
         | A1 => Trunc-UP2 A (Trunc n B) (ofHlevel-Trunc n B)
    \in fun-ext-inv (inv (A1.1.2 (inM f n)) *> pmap A1.1.1 A0 *> A1.1.2 (inM g n))

\function
inM-equiv {A B : \Type} (f : A -> B) (n : Nat) (E : isequiv f) : isequiv (inM f n) => ((inM E.1.1 n, \lam (q : Trunc n A) => (
    \let pm => \lam (z : Trunc n A -> Trunc n A) => z q
    \in pmap pm (inM-o f E.1.1 n) *> inH (E.1.1 o f) id E.1.2 n q *> pmap pm (inM-id {A} n))),
    (inM E.2.1 n, \lam q => (
        \let pm => \lam (z : Trunc n B -> Trunc n B) => z q
        \in pmap pm (inM-o E.2.1 f n) *> inH (f o E.2.1) id E.2.2 n q *> pmap pm (inM-id {B} n))))

\function
ofHlevel-inT-equiv (A : \Type) (n : Nat) (nT : ofHlevel (suc n) A) : isequiv (inT {n} {A}) => 
    \let G => ext nT (id {A})
    \in ((G, \lam _ => idp), (G, uniq (ofHlevel-Trunc n A) (inT o G) id (\lam _ => idp)))

\function
inT-equiv-ofHlevel (A : \Type) (n : Nat) (e : isequiv (inT {n} {A})) : ofHlevel (suc n) A 
    => transport (\lam B => ofHlevel (suc n) B) (inv (equiv-to-path (inT {n} {A}, e))) (ofHlevel-Trunc n A)

\function
sigma-Trunc (A B : \Type) (n : Nat) : Trunc n (\Sigma A B) =~= (\Sigma (Trunc n A) (Trunc n B)) => 
    \let | P1 => Trunc n (\Sigma A B)
         | P2 => \Sigma (Trunc n A) (Trunc n B)
         | nTP1 => ofHlevel-Trunc n (\Sigma A B)
         | nTP2 => ofHlevel-sigma {Trunc n A} (\lam _ => Trunc n B) {suc n} (ofHlevel-Trunc n A) (\lam _ => ofHlevel-Trunc n B)
         | nTM => \lam P (nTP : ofHlevel (suc n) P) => ofHlevel-codom (Trunc n B) (const P) (suc n) (const nTP)
         | F : P1 -> P2 => ext {n} {\Sigma A B} {\Sigma (Trunc n A) (Trunc n B)} nTP2 (\lam p => (inT p.1, inT p.2))
         | G : P2 -> P1 => uncurry (ext {n} {A} {Trunc n B -> P1} (nTM P1 nTP1) (\lam a => ext {n} {B} {P1} nTP1 (\lam b => inT (a, b))))
         | cFG => curry (F o G)
         | cId => curry (id {P2})
    \in (F, ((G, uniq nTP1 (G o F) id (\lam x => idp)), (G, curry-fun-eq (F o G) (id {P2})
            (uniq (nTM P2 nTP2) cFG cId (\lam a => fun-ext (uniq nTP2 (cFG (inT a)) (cId (inT a)) (\lam _ => idp)))))))

\function
sigma-fibers-Trunc {A : \Type} (P : A -> \Type) (n : Nat) : Trunc n (\Sigma (x : A) (Trunc n (P x))) =~= Trunc n (\Sigma (x : A) (P x)) => 
    \let | T1 => \Sigma (x : A) (Trunc n (P x))
         | T2 => \Sigma (x : A) (P x)
         | P1 => Trunc n T1
         | P2 => Trunc n T2
         | F : P1 -> P2 => ext (ofHlevel-Trunc n T2)
             (uncurry-d (\lam x => Trunc n (P x)) (\lam (x : A) => ext (ofHlevel-Trunc n T2) (\lam (y : P x) => inT (x, y))))
         | G : P2 -> P1 => inM {T2} {T1} (\lam (p : T2) => (p.1, inT p.2)) n
    \in (F, ((G, uniq (ofHlevel-Trunc n T1) (G o F) id (curry-d-fun-eq (\lam x => Trunc n (P x)) (G o F o inT) inT
            (\lam x => fun-ext {Trunc n (P x)} {P1} (uniq (ofHlevel-Trunc n T1) (curry-d (\lam x => Trunc n (P x)) (G o F o inT) x)
                (curry-d (\lam x => Trunc n (P x)) (inT {n} {T1}) x) (\lam _ => idp))))),
            (G, uniq (ofHlevel-Trunc n T2) (F o G) id (\lam _ => idp))))

\function
sigma-base-Trunc {A : \Type} {n : Nat} (nT : ofHlevel (suc n) A) (P : A -> \Type) :
    (\Sigma (a : A) (Trunc n (P a))) =~= Trunc n (\Sigma (a : A) (P a)) => 
    \let A0 => equiv-to-path (inT {n} {\Sigma (x : A) (Trunc n (P x))}, ofHlevel-inT-equiv (\Sigma (x : A) (Trunc n (P x))) n
             (ofHlevel-sigma (\lam a => Trunc n (P a)) {suc n} nT (\lam a => ofHlevel-Trunc n (P a))))
    \in transport (\lam T => T =~= Trunc n (\Sigma (x : A) (P x))) (inv A0) (sigma-fibers-Trunc P n)

\function
Trunc-paths (A : \Type) (n : Nat) (x y : A) : isequiv (f n x y) => 
    \let | TA => Trunc (suc n) A
         | L : ofHlevel (2 + n) (TA -> suc n `Types) =>
             ofHlevel-codom TA (const (suc n `Types)) (2 + n) (const (ofHlevel-Types (suc n)))
         | P : TA -> TA -> suc n `Types => ext {suc n} {A} {TA -> suc n `Types} L
             (\lam (a : A) => ext {suc n} {A} {suc n `Types} (ofHlevel-Types (suc n)) (\lam (a' : A) => (Trunc n (a = a'), ofHlevel-Trunc n (a = a'))))
         | L0 : \Pi (u v : TA) -> ofHlevel (suc n) ((P u v).1 -> u = v) =>
             \lam u v => ofHlevel-codom (P u v).1 (const (u = v)) (suc n) (\lam _ => ofHlevel-Trunc (suc n) A u v)
         | L1 : \Pi (u : TA) -> ofHlevel (suc n) (\Pi (v : TA) (w : (P u v).1) -> u = v) =>
             \lam u => ofHlevel-codom TA (\lam v => (P u v).1 -> u = v) (suc n) (L0 u)
         | decode : \Pi (u v : TA) (w : (P u v).1) -> u = v => Trunc-UP {suc n} {A} {\lam (u : TA) => \Pi (v : TA) (w : (P u v).1) -> u = v}
             (\lam u => ofHlevel-suc {_} {suc n} (L1 u))
         (\lam (x : A) => Trunc-UP {suc n} {A} {\lam (v : TA) => (P (inT x) v).1 -> inT x = v} (\lam v => ofHlevel-suc {_} {suc n} (L0 (inT x) v))
             (\lam (y : A) => f n x y))
         | r : \Pi (u : TA) -> (P u u).1 =>
         Trunc-UP {suc n} {A} {\lam u => (P u u).1} (\lam (u : TA) => ofHlevel-suc {_} {suc n} (P u u).2)
             (\lam x => inT (idpe x))
         | encode : \Pi {u v : TA} (u = v) -> (P u v).1 => \lam {u} {v} p => transport (\lam (v : TA) => (P u v).1) p (r u)
         | L2 : ofHlevel (4 + n) TA => ofHlevel-suc {_} {3 + n} (ofHlevel-suc {_} {2 + n} (ofHlevel-Trunc (suc n) A))
         | A1 : \Pi (u : TA) -> decode u u (encode (idpe u)) = idpe u =>
         Trunc-UP {suc n} {A} {\lam u => decode u u (encode (idpe u)) = idpe u}
             (\lam u => L2 u u (decode u u (encode (idpe u))) (idpe u)) (\lam _ => idp)
         | A2 : \Pi (u v : TA) (p : u = v) -> decode u v (encode p) = p =>
             \lam u v => Jl {TA} {u} (\lam v p => decode u v (encode p) = p) (A1 u) {v}
         | L3 : \Pi (u v : TA) -> ofHlevel (2 + n) (P u v).1 => \lam u v => ofHlevel-suc {_} {suc n} (P u v).2
         | L4 : \Pi (u v : TA) -> ofHlevel (2 + n) (\Pi (x : (P u v).1) -> encode (decode u v x) = x) =>
         \lam u v => ofHlevel-codom (P u v).1 (\lam x => encode (decode u v x) = x) (2 + n)
             (\lam x => ofHlevel-suc {_} {2 + n} (L3 u v) (encode (decode u v x)) x)
         | A3 : \Pi (a b : A) (x : a = b) -> encode (decode (inT a) (inT b) (inT x)) = inT x =>
         \lam a b x => transport-postcompose (\lam b => a = b) x (Trunc n) (\lam (b : A) (p : a = b) => inT p) (idpe a) *>
             pmap inT (transp-pathfibers a x (idpe a) *> concat-idp x)
         | A4 : \Pi (u v : TA) (x : (P u v).1) -> encode (decode u v x) = x =>
         Trunc-UP {suc n} {A} {\lam u => \Pi (v : TA) (x : (P u v).1) -> encode (decode u v x) = x}
             (\lam u => ofHlevel-codom TA (\lam v => \Pi (x : (P u v).1) -> encode (decode u v x) = x) (2 + n) (L4 u))
         (\lam (a : A) => Trunc-UP {suc n} {A} {\lam v => \Pi (x : (P (inT a) v).1) -> encode (decode (inT a) v x) = x} (L4 (inT a))
             (\lam (b : A) => Trunc-UP {n} {a = b} {\lam x => encode (decode (inT a) (inT b) x) = x}
                 (\lam x => L3 (inT a) (inT b) (encode (decode (inT a) (inT b) x)) x) (A3 a b)))
         | A5 : \Pi (u v : TA) -> (P u v).1 =~= (u = v) => \lam u v => (decode u v, ((encode {u} {v}, A4 u v), (encode {u} {v}, A2 u v)))
    \in (A5 (inT x) (inT y)).2 \where {
    \function
    f {A : \Type} (n : Nat) (x y : A) : Trunc n (x = y) -> inT {suc n} x = inT {suc n} y 
        => ext {n} {x = y} (ofHlevel-Trunc (suc n) A (inT {suc n} x) (inT {suc n} y)) (\lam p => pmap inT p)

}

\function
Trunc-Omega (A : Pointed) (n : Nat) : Trunc n (Omega 1 A).1 = (Omega 1 (Trunc (suc n) A.1, inT A.2)).1 
    => equiv-to-path (Trunc-paths.f n A.2 A.2, Trunc-paths A.1 n A.2 A.2)

\function
TruncP (n : Nat) (A : Pointed) : Pointed => (Trunc n A.1, inT A.2)

\function
TruncP-Omega (A : Pointed) (n : Nat) : TruncP n (Omega 1 A) = Omega 1 (TruncP (suc n) A) 
    => sigma-ext-eq {\oo-Type} id {TruncP n (Omega 1 A)} {Omega 1 (TruncP (suc n) A)} (Trunc-Omega A n, idp)

\function
Trunc-Omega-it (A : Pointed) (n k : Nat) : TruncP n (Omega k A) = Omega k (TruncP (k + n) A) => \elim k
    | zero => idp
    | suc k' => pmap (\lam (T : Pointed) => TruncP n T) (Omega-suc k' A) *> Trunc-Omega-it (Omega 1 A) n k' *>
        pmap (Omega k') (TruncP-Omega A (k' + n)) *> inv (Omega-suc k' (TruncP (suc (k' + n)) A))

\function
Trunc-cumulative (k d : Nat) (A : \Type) : Trunc k (Trunc (k + d) A) = Trunc k A => 
    \let | P1 => Trunc k (Trunc (k + d) A)
         | P2 => Trunc k A
         | L1 : ofHlevel (suc (k + d)) (Trunc k A) =>
             transport (\lam s => ofHlevel s (Trunc k A)) (plus-comm d (suc k)) (ofHlevel-plus d (ofHlevel-Trunc k A))
         | L2 : ofHlevel (suc (k + d)) P1 =>
             transport (\lam s => ofHlevel s P1) (plus-comm d (suc k)) (ofHlevel-plus d (ofHlevel-Trunc k (Trunc (k + d) A)))
         | L3 : ofHlevel (suc k) P1 => ofHlevel-Trunc k (Trunc (k + d) A)
         | F : P1 -> P2 => ext (ofHlevel-Trunc k A) (ext L1 (\lam a => inT a))
         | G : P2 -> P1 => ext L3 (\lam a => inT {k} {Trunc (k + d) A} (inT {k + d} {A} a))
    \in equiv-to-path (F, ((G, uniq L3 (G o F) id (uniq L2 (G o F o inT) inT (\lam a => idp))),
            (G, uniq (ofHlevel-Trunc k A) (F o G) id (\lam a => idp))))

\function
connected {A B : \Type} (n : Nat) (f : A -> B) => \Pi (b : B) -> isContr (Trunc n (fib f b))

\function
truncated {A B : \Type} (n : Nat) (f : A -> B) => \Pi (b : B) -> ofHlevel n (fib f b)

\function
zero-truncated-hae {A B : \Type} (f : A -> B) : contr-fibers f = hae f 
=> prop-eq (depfun-preserve-prop (\lam y => isContr (fib f y)) (\lam y => isContrFun-isProp (fib f y))) (hae-is-prop f)
    (contr-hae f) (hae-contr f)

\function
connected-isProp {A B : \Type} (n : Nat) (f : A -> B) : isProp (connected n f) 
    => depfun-preserve-prop (\lam b => isContr (Trunc n (fib f b))) (\lam b => isContrFun-isProp _)

\function
connected-t (n : Nat) (A : \Type) => connected {A} {Unit} n (const unit)

\function
is_surjective {A B : \Type} (f : A -> B) => \Pi (b : B) -> Trunc zero (fib f b)

\function
surjective-isProp {A B : \Type} (f : A -> B) : isProp (is_surjective f) 
    => depfun-preserve-prop (\lam b => Trunc zero (fib f b)) (\lam b => ofHlevel1-isProp _ (ofHlevel-Trunc zero (fib f b)))

\function
zeroconn-surj {A B : \Type} {f : A -> B} : connected zero f = is_surjective f 
=> prop-eq (connected-isProp zero f) (surjective-isProp f) (\lam isC b => (isC b).1)
    (\lam isS b => (isS b, \lam a' => ofHlevel1-isProp _ (ofHlevel-Trunc zero (fib f b)) (isS b) a'))

\function
retr-Trunc {A B : \Type} (R : is_retr A B) (n : Nat) : is_retr (Trunc n A) (Trunc n B) 
=> (inM R.1 n, (inM R.2.1 n, transport (\lam Q => Q ~ id {Trunc n A}) (inv (inM-o R.1 R.2.1 n))
    (transport (\lam Q => inM (R.2.1 o R.1) n ~ Q) (inM-id {A} n) (inH (R.2.1 o R.1) id R.2.2 n))))

\function
conn-retr {A B X Y : \Type} (g : A -> B) (f : X -> Y) {n : Nat} (R : g `retract_of1` f) (isNC : n `connected` f) : n `connected` g 
    => \lam b => retr-Contr (retr-Trunc (retr-fibers g f R b) n) (isNC (R.3 b))

\function
connectedness-criterion {A B : \Type} (f : A -> B) (n : Nat) : tfae3 (n `connected` f) (S2 n f) (S3 n f) => (connected-isProp n f,
    depfun-preserve-prop {B -> suc n `Types} (\lam PP => isequiv (pc f PP)) (\lam PP => isequiv-is-prop (pc f PP)),
    \lam (s3 : S3 n f) => depfun-preserve-prop {B -> suc n `Types} (\lam PP => rinv (pc f PP))
        (\lam PP => isContr-isProp (rinv (pc f PP)) (rinv-contr (pc f PP) (equiv-to-qinv (pc f PP) (F12 n f (F31 n f s3) PP)))) s3,
    F12 n f, \lam (C : S2 n f) (PP : B -> suc n `Types) => (C PP).2, F31 n f) \where {
    \function
    pc {A B : \Type} {n : Nat} (f : A -> B) (P : B -> suc n `Types) (s : \Pi (b : B) -> (P b).1) (a : A) : (P (f a)).1 => s (f a)

    \function
    S2 {A B : \Type} (n : Nat) (f : A -> B) => \Pi (PP : B -> suc n `Types) -> isequiv (pc f PP)

    \function
    S3 {A B : \Type} (n : Nat) (f : A -> B) => \Pi (PP : B -> suc n `Types) -> rinv (pc f PP)

    \function
    F12 {A B : \Type} (n : Nat) (f : A -> B) (C : n `connected` f) : S2 n f => \lam (PP : B -> suc n `Types) => (
        \let | E2' => \lam (a : A) => \Pi (X : \Sigma (b : B) (f a = b)) -> (PP X.1).1
             | A0 => depfun-equiv (\lam b => (PP b).1) (\lam b => fib f b -> (PP b).1)
                 (\lam b => equiv-trans (equiv-symm (pi-over-contr (\lam _ => (PP b).1) (C b))) (TruncUP2-equiv (fib f b) (PP b).2))
             | A1 => qinv-to-equiv {\Pi (b : B) -> fib f b -> (PP b).1} {\Pi (a : A) -> E2' a} (\lam e1 a X => e1 X.1 (a, X.2))
                 (\lam e2 b F => e2 F.1 (b, F.2), \lam _ => idp, \lam _ => idp)
             | A2 => depfun-equiv E2' (\lam (a : A) => (PP (f a)).1)
                 (\lam a => pi-over-contr (\lam (X : \Sigma (b : B) (f a = b)) => (PP X.1).1) (cone-isContr (f a)))
        \in (equiv-trans (equiv-trans A0 A1) A2).2)

    \function
    F31 {A B : \Type} (n : Nat) (f : A -> B) (C : S3 n f) : n `connected` f => 
        \let | PP => \lam (b : B) => TruncT n (fib f b)
             | d : \Pi (a : A) -> Trunc n (fib f (f a)) => \lam a => inT (a, idpe (f a))
             | c : \Pi (b : B) -> Trunc n (fib f b) => (C PP).1 d
        \in \lam b => (c b,
                \lam w => inv (Trunc-UP {_} {_} {\lam f => f = c b} (\lam (x : Trunc n (fib f b)) => ofHlevel-suc {_} {suc n} (PP b).2 x (c b))
                    (\lam (q : fib f b) => Jl {B} {f q.1} (\lam b' p' => (
                        \let p1 : fib f b' => (q.1, p')
                        \in inT p1 = c b')) (inv (path (\lam i => ((C PP).2 d @ i) q.1))) {b} q.2) w))

}

\function
conn-tf {A B : \Type} (f : A -> B) (n k : Nat) (C : n `connected` f) (P : B -> suc (k + n) `Types) :
    truncated k (connectedness-criterion.pc f P) => \elim k
    | zero => 
        \let ff => connectedness-criterion.pc f P
        \in transport id (inv (zero-truncated-hae ff *> hae-equiv-eq ff)) ((connectedness-criterion f n).4 C P)
    | suc k' => \lam ell gp hq => (
        \let | g => gp.1
             | h => hq.1
             | p => gp.2
             | q => hq.2
             | PA => \lam a => (P (f a)).1
             | ff => connectedness-criterion.pc {A} {B} {suc (k' + n)} f P
             | Q : B -> suc (k' + n) `Types => \lam b' => (g b' = h b', (P b').2 (g b') (h b'))
             | A0 => equiv-to-path (fib-equiv ff ell gp hq)
             | pqi : ff g = ff h => p *> inv q
             | pqia => \lam a => path (\lam i => (pqi @ i) a)
             | pff => pmap ff {g} {h}
             | P2 => fib {g = h} {ff g = ff h} pff pqi
             | P3 => fib (\lam (eq : \Pi (b : B) -> g b = h b) a => eq (f a)) pqia
             | A1 => sigma-eq-second {g = h} (\lam gam => pff gam *> q = p) (\lam gam => pff gam = pqi)
             (\lam eq => transport (\lam p' => (pff eq *> q = p') = (pff eq = pqi)) (concat-assoc p (inv q) q *> pmap (p *>) (inv-concat q))
                 (inv (path-postcomp (pff eq) pqi q)))
             | F1 : P2 -> P3 => \lam p2 => (\lam b => path (\lam i => (p2.1 @ i) b),
                 funExt {A} (\lam a => g (f a) = h (f a)) (\lam a => path (\lam i => (p2.1 @ i) (f a))) pqia
                     (\lam a => pmap (\lam (eq : ff g = ff h) => path (\lam i => (eq @ i) a)) p2.2))
             | G1 : P3 -> P2 => \lam p3 => (path (\lam i b => p3.1 b @ i), pmap (funExt PA (ff g) (ff h)) p3.2)
             | A2 : P2 = P3 => equiv-to-path (F1, ((G1, \lam _ => idp), (G1, \lam _ => idp)))
        \in transport (ofHlevel k') (inv (A0 *> A1 *> A2)) (conn-tf f n k' C Q pqia))

\function
connected-type (n : Nat) (A : \Type) => n `connected` (\lam (a : A) => unit)

\function
connected-type-criterion (n : Nat) (A : \Type) : n `connected-type` A = (\Pi (B : suc n `Types) -> isequiv (\lam (b : B.1) (_ : A) => b)) => 
    \let | F1 => \lam (PP : Unit -> suc n `Types) =>
             \lam (s : \Pi (b : Unit) -> (PP b).1) (a : A) => connectedness-criterion.pc {A} {Unit} {n} (\lam _ => unit) PP s a
         | F2 => \lam (B : suc n `Types) => \lam (b : B.1) (a : A) => b
         | EQ : \Pi (B : suc n `Types) -> (Unit -> B.1) =~= B.1 =>
             \lam B => qinv-to-equiv (\lam (f : Unit -> B.1) => f unit) (\lam b _ => b, \lam _ => idp, \lam _ => idp)
         | A0 => equiv-to-path
         (qinv-to-equiv {connected-type n A} {\Pi (b : Unit) -> isContr (Trunc n (fib {A} (\lam _ => unit) b))} (\lam C b => C b)
             (\lam C _ => C unit, \lam _ => idp, \lam _ => idp))
         | A1 => tfae-eq12 (connectedness-criterion {A} {Unit} (\lam (a : A) => unit) n)
         | A2 => prop-eq (depfun-preserve-prop (\lam PP => isequiv (F1 PP)) (\lam PP => isequiv-is-prop (F1 PP)))
             (depfun-preserve-prop (\lam B => isequiv (F2 B)) (\lam B => isequiv-is-prop (F2 B)))
         (\lam p3 B => (equiv-trans (equiv-symm (EQ B))
             (\lam s a => connectedness-criterion.pc {A} {Unit} {n} (\lam _ => unit) (\lam _ => B) s a, p3 (\lam _ => B))).2)
             (\lam p4 PP => (equiv-trans (EQ (PP unit)) (\lam (b : (PP unit).1) (_ : A) => b, p4 (PP unit))).2)
    \in A0 *> A1 *> A2

\function
connected-type-bp-incl (n : Nat) (A : Pointed) : suc n `connected-type` A.1 = n `connected` bp-incl A => 
    \let A0 => connected-type-criterion (suc n) A.1
    \in prop-eq {suc n `connected-type` A.1} {n `connected` bp-incl A} (connected-isProp (suc n) (\lam (a : A.1) => unit))
            (connected-isProp n (bp-incl A)) (\lam CT => connectedness-criterion.F31 n (bp-incl A) (\lam PP => (
            \let | A1 => transport id A0 CT (suc n `Types, ofHlevel-Types1 n)
                 | g : \Pi (a : A.1) -> (A1.2.1 PP).1 = (PP a).1 =>
                     \lam a => (sigma-eq-ext (\lam T => ofHlevel (suc n) T) (path (\lam i => (A1.2.2 PP @ i) a))).1
            \in (\lam u a => transport id (g a) (transport id (inv (g A.2)) (u unit)),
                    \lam w => fun-ext (\lam _ => transp-invpath-rinv id (g A.2) (w unit))))))
        (\lam CI => transport id (inv A0) (\lam B => ((\lam f => f A.2, \lam b => idp), (\lam f => f A.2,
            \lam f => fun-ext (\lam a => inv ((transport id (tfae-eq12 (connectedness-criterion (bp-incl A) n)) CI (\lam (a : A.1) => (f a = f A.2, B.2 (f a) (f A.2)))).1.1
                (\lam (a : Unit) => idp) a))))))

\function
wedge-connectivity {n m : Nat} (A B : Pointed) (Ac : suc n `connected-type` A.1) (Bc : suc m `connected-type` B.1)
    (P : A.1 -> B.1 -> (2 + n + m) `Types) (f : \Pi (a : A.1) -> (P a B.2).1) (g : \Pi (b : B.1) -> (P A.2 b).1)
    (p : f A.2 = g B.2) : statement A B (\lam a b => (P a b).1) f g p 
    => helper A B (connectedness-criterion.F12 n (bp-incl A) (transport id (connected-type-bp-incl n A) Ac)) Bc P f g p \where {
    \function
    helper {n m : Nat} (A B : Pointed) (Ac : connectedness-criterion.S2 n (bp-incl A)) (Bc : suc m `connected-type` B.1)
        (P : A.1 -> B.1 -> (2 + n + m) `Types) (f : \Pi (a : A.1) -> (P a B.2).1) (g : \Pi (b : B.1) -> (P A.2 b).1)
        (p : f A.2 = g B.2) : statement A B (\lam a b => (P a b).1) f g p => 
        \let | PP : A.1 -> suc n `Types => \lam a => (\Sigma (k : \Pi (b : B.1) -> (P a b).1) (k B.2 = f a),
                 transport (ofHlevel (suc n)) (inv (equiv-to-path (qinv-to-equiv {\Sigma (k : \Pi (b : B.1) -> (P a b).1) (k B.2 = f a)}
                     {fib (\lam (k : \Pi (b : B.1) -> (P a b).1) (_ : Unit) => k B.2) (\lam (_ : Unit) => f a)}
                     (\lam pp => (pp.1, fun-ext (\lam _ => pp.2))) (\lam pp => (pp.1, fun-ext-inv pp.2 unit), \lam _ => idp, \lam _ => idp))))
                     (conn-tf (bp-incl B) m (suc n) (transport id (connected-type-bp-incl m B) Bc) (P a) (\lam (_ : Unit) => f a)))
             | ell : \Pi (a : A.1) -> (PP a).1 => (Ac PP).2.1 (\lam (_ : Unit) => (g, inv p))
             | A1 => sigma-eq-ext (\lam (k : \Pi (b : B.1) -> (P A.2 b).1) => k B.2 = f A.2) {ell A.2} {(g, inv p)}
                 (fun-ext-inv {Unit} {(PP A.2).1} ((Ac PP).2.2 (\lam (_ : Unit) => (g, inv p))) unit)
             | r => \lam b => path (\lam j => (A1.1 @ j) b)
        \in (\lam a => (ell a).1, \lam a => (ell a).2, r,
                inv (inv-inv p) *> pmap inv (inv A1.2 *> coePath (r B.2) (ell A.2).2 (idpe (f A.2))) *>
                concat-inv-comm (inv (r B.2)) (ell A.2).2 *> pmap (\lam p => inv (ell A.2).2 *> p) (inv-inv (r B.2)))

    \function
    statement (A B : Pointed) (P : A.1 -> B.1 -> \Type) (f : \Pi (a : A.1) -> P a B.2) (g : \Pi (b : B.1) -> P A.2 b)
        (p : f A.2 = g B.2) 
    => \Sigma (h : \Pi (a : A.1) (b : B.1) -> P a b) (q : \Pi (a : A.1) -> h a B.2 = f a) (r : \Pi (b : B.1) -> h A.2 b = g b)
        (p = inv (q A.2) *> r B.2)

}

\function
sigma {X : Pointed} (x : X.1) : (Omega 1 (SuspP X)).1 => path (merid x) *> inv (path (merid X.2))

\function
Trunc-isContr (A : \Type) (n : Nat) (Ac : isContr A) : isContr (Trunc n A) => transport isContr (equiv-to-path (inT {n} {A},
    ofHlevel-inT-equiv A n (transport (\lam n => ofHlevel n A) (inv (plus-comm0 (suc n))) (ofHlevel-plus {A} (suc n) Ac)))) Ac

\function
Trunc-isContr-suc (A : \Type) (n : Nat) (Ac : isContr (Trunc (suc n) A)) : isContr (Trunc n A) 
=> transport isContr (transport (\lam k => Trunc n (Trunc k A) = Trunc n A) (plus-comm n 1) (Trunc-cumulative n 1 A))
    (Trunc-isContr (Trunc (suc n) A) n Ac)

\function
connected-pred {A B : \Type} (n : Nat) (f : A -> B) (fC : suc n `connected` f) : n `connected` f 
    => \lam b => Trunc-isContr-suc (fib f b) n (fC b)

\function
connected-zero {A B : \Type} (n : Nat) (f : A -> B) (fC : n `connected` f) : zero `connected` f => \elim n
    | zero => fC
    | suc n' => connected-zero n' f (connected-pred n' f fC)

\function
connected-zero-prop {A B : \Type} (f : A -> B) (fC : zero `connected` f) (P : B -> \Type) (PC : \Pi (b : B) -> isProp (P b)) :
    (\Pi (b : B) -> P b) =~= (\Pi (a : A) -> P (f a)) 
    => (\lam g a => g (f a), connectedness-criterion.F12 zero f fC (\lam b => (P b, isProp-ofHlevel1 (P b) (PC b))))

\function
code {X : Pointed} {n : Nat} (Xc : (1 + n) `connected-type` X.1) (y : (SuspP X).1) (p : north = y) : \oo-Type => \elim y
    | north => Trunc (1 + n + n) (fib sigma p)
    | south => Trunc (1 + n + n) (fib (\lam x => path (merid x)) p)
    | merid x1 i => 
        \let | P => \lam y => north {X.1} = y -> \oo-Type
             | mx1i : south = north => inv (path (merid x1))
             | HD => \lam (q : north = south) => h-instance {X} {n} Xc q
        \in (pathOver (pmap (transport P (path (merid x1)))
                (inv ((transport-funExt mx1i (\lam y => north = y) (\lam _ => \oo-Type) (codeS n) (codeN n)).2.1.1
                    (\lam q => inv (equiv-to-path ((HD q).1 x1,
                        (connected-zero-prop (bp-incl X) (connected-zero n (bp-incl X) (transport id (connected-type-bp-incl n X) Xc))
                            (\lam (x1 : X.1) => isequiv ((HD q).1 x1)) (\lam x1 => isequiv-is-prop ((HD q).1 x1))).2.1.1 (\lam _ => (HD q).2) x1)) *>
                        pmap (codeN n) (inv (coePath (idpe north) q mx1i *> concat-idp (q *> mx1i)))))) *>
                    transp-invpath-rinv P (path (merid x1)) (codeS n)) @ i) p \where {
    \function
    r' {Y : \oo-Type} {x1 x2 : Y} (p' p q : x1 = x2) (C : p' *> inv p = q *> inv p) : p' = q 
        => pmap (\lam pp => p' *> pp) (inv (inv-concat p)) *>
        inv (concat-assoc p' (inv p) p) *> pmap (\lam pp => pp *> p) C *> concat-assoc q (inv p) p *> pmap (q *>) (inv-concat p)

    \function
    r'-inv {Y : \oo-Type} {x1 x2 : Y} (p' p q : x1 = x2) (C : p' = q) : p' *> inv p = q *> inv p => pmap (\lam w => w *> inv p) C

    \function
    r'-linv {Y : \oo-Type} {x1 x2 : Y} (p' p q : x1 = x2) (C : p' *> inv p = q *> inv p) : r'-inv p' p q (r' p' p q C) = C 
    => Jl (\lam x2 p => \Pi (p' q : x1 = x2) (C : p' *> inv p = q *> inv p) -> r'-inv p' p q (r' p' p q C) = C)
        (\lam p' q (C : p' = q) => concat-idp _ *> concat-idp _) p p' q C

    \function
    r'-rinv {Y : \oo-Type} {x1 x2 : Y} (p' p q : x1 = x2) (C : p' = q) : r' p' p q (r'-inv p' p q C) = C 
    => Jl (\lam x2 p => \Pi (p' q : x1 = x2) (C : p' = q) -> r' p' p q (r'-inv p' p q C) = C)
        (\lam p' q (C : p' = q) => concat-idp _ *> concat-idp _) p p' q C

    \function
    r'' {Y : \oo-Type} {x1 x2 : Y} (p p' q : x1 = x2) (C : p *> inv p = q *> inv p') : p' = q => inv (concat-idp _) *>
        pmap (\lam pp => pp *> p') (inv (concat-inv _) *> C) *> concat-assoc _ _ _ *> pmap (q *>) (inv-concat _)

    \function
    rlemma {Y : \oo-Type} {x1 x2 : Y} (p q : x1 = x2) (C : p *> inv p = q *> inv p) : r'' p p q C = r' p p q C 
    => Jl (\lam x2' p' => \Pi (q' : x1 = x2') (C : p' *> inv p' = q' *> inv p') -> r'' p' p' q' C = r' p' p' q' C)
        (\lam q' C => idp) p q C

    \function
    fibS {X : Pointed} (p : north {X.1} = south) => fib (\lam x => path (merid x)) p

    \function
    codeN {X : Pointed} (n : Nat) (p : north {X.1} = north) : \oo-Type => Trunc (1 + n + n) (fib sigma p)

    \function
    codeS {X : Pointed} (n : Nat) (p : north {X.1} = south) : \oo-Type => Trunc (1 + n + n) (fibS p)

    \function
    h-data {X : Pointed} {n : Nat} (q : north {X.1} = south) 
        => \Sigma (h : \Pi (x1 : X.1) -> codeN n (q *> inv (path (merid x1))) -> codeS n q) (isequiv (h X.2))

    \function
    h-instance {X : Pointed} {n : Nat} (Xc : (1 + n) `connected-type` X.1) (q : north {X.1} = south) : h-data {X} {n} q => 
        \let | mx0 : north = south => path (merid X.2)
             | mx0i : south = north => inv mx0
             | PP : X.1 -> X.1 -> (2 + n + n) `Types => \lam x1 x2 => (
                 \let C0 => path (merid x2) *> mx0i = q *> inv (path (merid x1))
                 \in (C0 -> codeS n q, ofHlevel-codom C0 (\lam _ => codeS n q) (2 + n + n) (\lam _ => ofHlevel-Trunc (1 + n + n) (fibS q))))
             | f : \Pi (x1 : X.1) -> (PP x1 X.2).1 =>
                 \lam x1 (C : mx0 *> mx0i = q *> inv (path (merid x1))) => inT (x1, r'' mx0 (path (merid x1)) q C)
             | g : \Pi (x2 : X.1) -> (PP X.2 x2).1 =>
                 \lam x2 (C : path (merid x2) *> mx0i = q *> mx0i) => inT (x2, r' (path (merid x2)) mx0 q C)
             | pp : f X.2 = g X.2 => fun-ext {mx0 *> mx0i = q *> mx0i} {codeS n q} {f X.2} {g X.2} (\lam C => pmap (\lam z => inT (
                 \let x : fibS q => (X.2, z)
                 \in x)) (rlemma mx0 q C))
             | WC => wedge-connectivity X X Xc Xc PP f g pp
             | h : \Pi (x1 : X.1) -> codeN n (q *> inv (path (merid x1))) -> codeS n q =>
                 \lam x1 => ext (ofHlevel-Trunc (1 + n + n) (fibS q)) (\lam (z : fib sigma (q *> inv (path (merid x1)))) => WC.1 x1 z.1 z.2)
             | g2 : fib sigma (q *> mx0i) -> fibS q => \lam z => (z.1, r' (path (merid z.1)) mx0 q z.2)
             | g2i : fibS q -> fib sigma (q *> mx0i) => \lam z => (z.1, pmap (\lam w => w *> mx0i) z.2)
             | A2 : h X.2 = inM g2 (1 + n + n) =>
             fun-ext (uniq {_} {_} {codeS n q} (ofHlevel-Trunc (1 + n + n) (fibS q)) (h X.2) (inM g2 (1 + n + n))
                 (\lam (z : fib sigma (q *> mx0i)) => fun-ext-inv {_} {_} {WC.1 X.2 z.1} {g z.1} (WC.3 z.1) z.2))
             | A3 : isequiv g2 => qinv-to-equiv' g2 (g2i,
                 \lam wn => sigma-ext-eq (\lam z1 => sigma z1 = q *> mx0i) {g2i (g2 wn)} {wn} (idp, r'-linv (path (merid wn.1)) mx0 q wn.2),
                 \lam ws => sigma-ext-eq (\lam z1 => path (merid z1) = q) {g2 (g2i ws)} {ws} (idp, r'-rinv (path (merid ws.1)) mx0 q ws.2))
             | A4 : isequiv (h X.2) => transport isequiv (inv A2) (inM-equiv g2 (1 + n + n) A3)
        \in (h, A4)

}

\function
transport-pair {A : \oo-Type} (B : A -> \oo-Type) (C : \Pi (a : A) -> B a -> \oo-Type) (a1 a2 : A) (m : a1 = a2) (b : B a2) :
    transport (uncurry-d B C) {(a1, transport B (inv m) b)} {(a2, b)} (sigma-ext-eq B (m, transp-invpath-rinv B m b)) =
    (path-to-equiv
        (inv (transp-funcfibers B (\lam _ => \oo-Type) m (C a1) b) *> fun-ext-inv (pmapd (\lam a => B a -> \oo-Type) C m) b)).1 
=> Jl (\lam a2' m' => \Pi (b : B a2') ->
    transport (uncurry-d B C) {(a1, transport B (inv m') b)} {(a2', b)} (sigma-ext-eq B (m', transp-invpath-rinv B m' b)) =
    (path-to-equiv
        (inv (transp-funcfibers B (\lam _ => \oo-Type) m' (C a1) b) *> fun-ext-inv (pmapd (\lam a => B a -> \oo-Type) C m') b)).1)
    (\lam b => idp) m b

\function
transport-pair-new {A : \oo-Type} (B : A -> \oo-Type) (C : \Pi (a : A) -> B a -> \oo-Type) (a1 a2 : A) (m : a1 = a2) (b : B a2) :
transport (uncurry-d B C) {(a1, transport B (inv m) b)} {(a2, b)} (sigma-ext-eq B (m, transp-invpath-rinv B m b)) =
    (path-to-equiv (path (\lam i => C (inv m @ i) (coe (\lam j => B (inv m @ squeeze i j)) b right)))).2.1.1 
=> Jl (\lam a2' m' => \Pi (b : B a2') ->
    transport (uncurry-d B C) {(a1, transport B (inv m') b)} {(a2', b)} (sigma-ext-eq B (m', transp-invpath-rinv B m' b)) =
        (path-to-equiv (path (\lam i => C (inv m' @ i) (coe (\lam j => B (inv m' @ squeeze i j)) b right)))).2.1.1)
    (\lam b => idp) m b

\function
code-f1 {X : Pointed} {n : Nat} (Xc : (1 + n) `connected-type` X.1) (x2 : X.1) (q : north {X.1} = south)
    (r : path (merid x2) *> inv (path (merid X.2)) = q *> inv (path (merid X.2))) :
transport (uncurry-d (\lam y => north = y) (code {X} {n} Xc)) {(north, _)} {(south, _)}
    (sigma-ext-eq (\lam y => north = y) (path (merid X.2), transp-invpath-rinv (\lam y => north = y) (path (merid X.2)) q))
    (inT {1 + n + n} {\Sigma (x : X.1) (_ : path (merid x) *> inv (path (merid X.2)) = q *> inv (path (merid X.2)))} (x2, r)) =
    inT {1 + n + n} {\Sigma (y : X.1) (path (merid y) = q)} (x2, code.r' (path (merid x2)) (path (merid X.2)) q r) => 
    \let | A => Susp X.1
         | B => \lam y => north = y
         | C => code {X} {n} Xc
         | m => path (merid X.2)
         | E1 => transport (uncurry-d (\lam y => north = y) (code {X} {n} Xc)) {(north, _)} {(south, _)}
             (sigma-ext-eq (\lam y => north = y) (path (merid X.2), transp-invpath-rinv (\lam y => north = y) (path (merid X.2)) q))
             (inT {1 + n + n} {\Sigma (x : X.1) (_ : path (merid x) *> inv (path (merid X.2)) = q *> inv (path (merid X.2)))} (x2, r))
         | E2 => (path-to-equiv (path (\lam i => C (inv m @ i) (coe (\lam j => B (inv m @ squeeze i j)) q right)))).2.1.1
             (inT {1 + n + n} {\Sigma (x : X.1) (_ : path (merid x) *> inv (path (merid X.2)) = q *> inv (path (merid X.2)))} (x2, r))
         | E3 => inT {1 + n + n} {\Sigma (y : X.1) (path (merid y) = q)} (x2, code.r' (path (merid x2)) (path (merid X.2)) q r)
         | A1 : E1 = E2 => path (\lam i => (transport-pair B C north south m q @ i)
             (inT {1 + n + n} {\Sigma (x : X.1) (_ : path (merid x) *> inv (path (merid X.2)) = q *> inv (path (merid X.2)))} (x2, r)))
         | A2 : E2 = E3 => {?}
    \in A1 *> {_} {E1} {E2} {E3} A2

\function
code-new {X : Pointed} (n : Nat) (Xc : (1 + n) `connected-type` X.1) (y : (SuspP X).1) (p : north = y) : \oo-Type => \elim y
    | north => codeN n p
    | south => codeS n p
    | merid x1 i => {?} \where {
    \function
    fibS {X : Pointed} (p : north {X.1} = south) => fib (\lam x => path (merid x)) p

    \function
    codeN {X : Pointed} (n : Nat) (p : north {X.1} = north) : \oo-Type => Trunc (1 + n + n) (fib sigma p)

    \function
    codeS {X : Pointed} (n : Nat) (p : north {X.1} = south) : \oo-Type => Trunc (1 + n + n) (fibS p)

}

\function
contr-center {X : Pointed} (n : Nat) (Xc : (1 + n) `connected-type` X.1) (y : Susp X.1) (p : north = y) : code-new n Xc y p 
    => Jl (code-new n Xc) (inT {1 + n + n} {fib sigma idp} (X.2, concat-inv (path (merid X.2)))) p

\function
code-new-property {X : Pointed} (n : Nat) (Xc : (1 + n) `connected-type` X.1) (x1 : X.1) :
    contr-center n Xc south (path (merid x1)) = inT {1 + n + n} {code-new.fibS (path (merid x1))} (x1, idp) => {?}

\function
freudenthal {X : Pointed} (n : Nat) (Xc : (1 + n) `connected-type` X.1) (p : north {X.1} = south) : isContr (code-new.codeS n p) => 
    \let | A1 => ofHlevel-suc {_} {2 + n + n} (ofHlevel-Trunc (1 + n + n) (code-new.fibS p))
         | cc => contr-center n Xc (south {X.1}) p
         | A3 : \Pi (x1 : X.1) -> contr-center n Xc south (path (merid x1)) = inT {1 + n + n} {code-new.fibS (path (merid x1))} (x1, idp) =>
             \lam x1 => code-new-property n Xc x1
         | A2 : \Pi (a' : code-new.fibS p) -> cc = inT a' =>
             \lam a' => Jl (\lam p r => contr-center n Xc (south {X.1}) p = inT {1 + n + n} {code-new.fibS p} (a'.1, r)) (A3 a'.1) a'.2
    \in (cc, Trunc-UP {1 + n + n} {code-new.fibS p} {\lam a' => cc = a'} (\lam a' => A1 cc a') A2)
